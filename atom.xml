<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>violin的小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://androidhuilin.wang/"/>
  <updated>2019-05-19T14:45:45.689Z</updated>
  <id>https://androidhuilin.wang/</id>
  
  <author>
    <name>huilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android插件化基本流程</title>
    <link href="https://androidhuilin.wang/2019/05/08/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <id>https://androidhuilin.wang/2019/05/08/Android插件化基本流程/</id>
    <published>2019-05-08T08:40:38.000Z</published>
    <updated>2019-05-19T14:45:45.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>插件化主要功能</p><ul><li>实现宿主程序调用插件中类方法的功能</li><li>实现宿主程序获取插件中资源文件的功能</li><li>实现宿主程序渲染插件中layout布局的功能</li></ul></blockquote><p><strong>该篇暂未涉及到四大组件</strong></p><a id="more"></a><h2 id="加载插件中的类文件"><a href="#加载插件中的类文件" class="headerlink" title="加载插件中的类文件"></a>加载插件中的类文件</h2><blockquote><p>通多DexClassLoader加载器加载产检中的dex文件，相关文档可参考 <a href="http://liuwangshu.cn/application/classloader/2-android-classloader.html" target="_blank" rel="noopener">Android解析ClassLoader</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载apk，生成对应的ClassLoader</span></span><br><span class="line">DexClassLoader bundleDexClassLoader = <span class="keyword">new</span> DexClassLoader(</span><br><span class="line">f.getAbsolutePath(), dexDir.getAbsolutePath(), <span class="keyword">null</span>,</span><br><span class="line"> context.getClassLoader().getParent());</span><br></pre></td></tr></table></figure><h2 id="加载插件中的资源文件"><a href="#加载插件中的资源文件" class="headerlink" title="加载插件中的资源文件"></a>加载插件中的资源文件</h2><blockquote><p>Android中是通过Resources、AssetManager来获取资源文件。为了避免插件和宿主中资源id冲突的问题，加载插件中资源时会创建新的Resources、AssetManage对象，其中AssetManage需要通过反射机制添加插件的资源路径</p></blockquote><p><a href="https://www.jianshu.com/p/96d5b83ca26c" target="_blank" rel="noopener">参考文档插件化-资源加载 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   AssetManager.class.getDeclaredMethod(<span class="string">"addAssetPath"</span>, String.class).invoke(</span><br><span class="line">         assetManager, apkPath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">   System.out.println(<span class="string">"debug:createAssetManager :"</span>+th.getMessage());</span><br><span class="line">   th.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> assetManager;</span><br></pre></td></tr></table></figure><h3 id="宿主环境渲染插件中的布局文件"><a href="#宿主环境渲染插件中的布局文件" class="headerlink" title="宿主环境渲染插件中的布局文件"></a>宿主环境渲染插件中的布局文件</h3><blockquote><p>上面已经实现了加载插件中资源和类文件的功能， 获取到插件的布局后通过LayoutInflater来渲染布局。需要注意的是，获取LayoutInflater实例时需要对Context对象进行封装，重写Context 的getResources()、getAssets()、以及getClssLoader()方法，返回对应插件的相关信息。</p></blockquote><blockquote><p>同时需要重写getSystemService()实例化方法，通过cloneInContext()方法使设置的Context生效</p></blockquote><p>参考 <a href="https://github.com/Qihoo360/RePlugin/wiki" target="_blank" rel="noopener">360Replugin项目</a></p><p>相关分析文档 <a href="https://blog.csdn.net/yulong0809/article/details/78428247" target="_blank" rel="noopener">Replugin- 插件的安装和加载原理</a></p><p>以及Replugin项目中的 com.qihoo360.loader2.PluginContext 类文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginWrapper</span> <span class="keyword">extends</span> <span class="title">ContextWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resources mResources;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</span><br><span class="line">    <span class="keyword">private</span> ClassLoader mClassLoader;</span><br><span class="line">    <span class="keyword">private</span> String TAG=PluginWrapper.class.getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginWrapper</span><span class="params">(Context base,Resources resources,ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(base);</span><br><span class="line">        <span class="keyword">this</span>.mResources = resources;</span><br><span class="line">        <span class="keyword">this</span>.mClassLoader=classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LAYOUT_INFLATER_SERVICE.equals(name)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInflater == <span class="keyword">null</span>) &#123;</span><br><span class="line">                LayoutInflater inflater = (LayoutInflater) <span class="keyword">super</span>.getSystemService(name);</span><br><span class="line"><span class="comment">//                // 新建一个，设置其工厂</span></span><br><span class="line">                mInflater = inflater.cloneInContext(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mInflater;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSystemService(name);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mResources.getAssets();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getAssets();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mResources;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getResources();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  重写getClassLoader()方法，</span></span><br><span class="line"><span class="comment">     *  布局渲染时加载插件包里面的class文件</span></span><br><span class="line"><span class="comment">     *  避免自定义布局 ClassNotFoundException 问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插件包的classloader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mClassLoader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> mClassLoader;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG,<span class="string">"getClassLoader()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;插件化主要功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现宿主程序调用插件中类方法的功能&lt;/li&gt;
&lt;li&gt;实现宿主程序获取插件中资源文件的功能&lt;/li&gt;
&lt;li&gt;实现宿主程序渲染插件中layout布局的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;该篇暂未涉及到四大组件&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发一个Servlet项目</title>
    <link href="https://androidhuilin.wang/2018/05/18/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAServlet%E9%A1%B9%E7%9B%AE/"/>
    <id>https://androidhuilin.wang/2018/05/18/开发一个Servlet项目/</id>
    <published>2018-05-18T07:01:54.000Z</published>
    <updated>2019-05-17T09:01:18.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在开发项目过程中，客户端经常会遇到以下问题：1. 开发环境未能及时部署造成的开发阻塞问题；2. 一些界面依赖后台接口动态绘制UI,需要后台配合修改数据。<br>通常客户端会在本地写一些假数据用来展示界面，等开发环境部署后，在联调接口和优化接口请求逻辑同时得记得把假数据给移除掉。这样的话客户端会多做一些无用<br>功。后台正式开发完之前肯定都是些假数据，但是我们可以把假数据放到服务器上而不是客户端。所以，现在的需求就是：有一个服务可以按照接口协议接收客户端的上传报文<br>并按照上传报文返回相应的返回报文（这里的返回报文其实就是一段按着接口协议的静态文本）。当然，后台小伙伴可没空给我写这个，不过技术上还是给了很多帮助的。</p></blockquote><a id="more"></a><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><p>项目开发需要下面工具,这篇博客主要记录IDEA创建Servlet项目，所以工具的下载和环境变量的配置自己百度搜索。</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a></li><li><a href="https://www.jetbrains.com/idea/download/#section=mac" target="_blank" rel="noopener">IntelliJ IDEA</a>(需要下载Ultimate版)</li><li><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat</a></li></ul><h2 id="idea-创建Servlet项目"><a href="#idea-创建Servlet项目" class="headerlink" title="idea 创建Servlet项目"></a>idea 创建Servlet项目</h2><blockquote><p>现在后台开发基本都使用IDEA了，而且跟AS是同一家公司的产品，界面风格快捷键操作也很像，对于Android开发者上手还是挺友好的。</p></blockquote><h3 id="新建Java-Web项目"><a href="#新建Java-Web项目" class="headerlink" title="新建Java Web项目"></a>新建Java Web项目</h3><blockquote><p>创建最简单的Servlet项目，不需要引用Spring、Struts等框架</p></blockquote><p><img src="/img/servlet_create.png" alt></p><h3 id="添加Tomcat依赖"><a href="#添加Tomcat依赖" class="headerlink" title="添加Tomcat依赖"></a>添加Tomcat依赖</h3><blockquote><p>项目创建成功后，需要引入Tomcat的依赖。在Project Structure中进行如下操作</p></blockquote><p><img src="/img/import_tom_jar.png" alt></p><p> <img src="/img/import_tom_jar2.png" alt></p><h3 id="完善项目配置"><a href="#完善项目配置" class="headerlink" title="完善项目配置"></a>完善项目配置</h3><h4 id="新建Servlet类，处理报文逻辑"><a href="#新建Servlet类，处理报文逻辑" class="headerlink" title="新建Servlet类，处理报文逻辑"></a>新建Servlet类，处理报文逻辑</h4><blockquote><p>添加好Tomcat的依赖后，在工程的’src’目录下创建自己的包名，在包底下新建一个类继承<code>HttpServlet</code>。<strong>保证上面引入Tomcat依赖成功，不然找不到<code>HttpServlet</code>类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改web-xml-配置文件"><a href="#修改web-xml-配置文件" class="headerlink" title="修改web.xml 配置文件"></a>修改web.xml 配置文件</h4><blockquote><p>在web–&gt;WEB-INF–&gt;web.xml 文件中添加下面信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.first.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/firstservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><blockquote><p>如上，基本的项目框架已经完善。但是想让项目通过网络访问，还差最后一步，为项目配置Tomcat服务器。</p></blockquote><p><img src="/img/deploy_tomcat1.png" alt></p><p><img src="/img/deploy_tomcat2.png" alt></p><p><img src="/img/deploy_tomcat3.png" alt></p><p><img src="/img/deploy_tomcat4.png" alt></p><p>日志显示下面表示服务启动成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2018-05-22 03:18:59,303] Artifact FirstServlet:war exploded: Artifact is deployed successfully</span><br><span class="line">[2018-05-22 03:18:59,303] Artifact FirstServlet:war exploded: Deploy took 715 milliseconds</span><br></pre></td></tr></table></figure><h2 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h2><blockquote><p>Tomcat服务启动成功后就可以通过<code>Postman</code>或者其他工具来测试服务接口</p></blockquote><p>修改’FirstServlet’中的处理逻辑，处理上传报文和返回报文。这里只是做了简单处理：读取打印上传报文，添加自定义信息拼接上传报文最为回复报文返回。<br>实际可按照自己项目中的报文加解密规则处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = req.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">while</span> (((l = inputStream.read(b)) != -<span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            baos.write(b, <span class="number">0</span>, l);</span><br><span class="line">        &#125;</span><br><span class="line">        String request = <span class="keyword">new</span> String(baos.toByteArray());</span><br><span class="line">        System.out.println(<span class="string">"上传报文："</span> + request);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);<span class="comment">//解决返回报文中中文乱码问题</span></span><br><span class="line">        resp.getWriter().println(<span class="string">"回复报文开始----------------"</span>);</span><br><span class="line">        resp.getWriter().println(request);</span><br><span class="line">        resp.getWriter().println(<span class="string">"回复报文结束----------------"</span>);</span><br><span class="line">        resp.getWriter().close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径为：本机ip地址+8080（tomcat端口）+/firstservlet(项web.xml中<code>url-pattern</code>字段)</p><p><img src="/img/test_servlet1.png" alt></p><p><img src="/img/test_servlet2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在开发项目过程中，客户端经常会遇到以下问题：1. 开发环境未能及时部署造成的开发阻塞问题；2. 一些界面依赖后台接口动态绘制UI,需要后台配合修改数据。&lt;br&gt;通常客户端会在本地写一些假数据用来展示界面，等开发环境部署后，在联调接口和优化接口请求逻辑同时得记得把假数据给移除掉。这样的话客户端会多做一些无用&lt;br&gt;功。后台正式开发完之前肯定都是些假数据，但是我们可以把假数据放到服务器上而不是客户端。所以，现在的需求就是：有一个服务可以按照接口协议接收客户端的上传报文&lt;br&gt;并按照上传报文返回相应的返回报文（这里的返回报文其实就是一段按着接口协议的静态文本）。当然，后台小伙伴可没空给我写这个，不过技术上还是给了很多帮助的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Server" scheme="https://androidhuilin.wang/categories/Server/"/>
    
    
      <category term="servlet" scheme="https://androidhuilin.wang/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>Charles--抓取https报文</title>
    <link href="https://androidhuilin.wang/2018/04/17/Charles-%E6%8A%93%E5%8F%96https%E6%8A%A5%E6%96%87/"/>
    <id>https://androidhuilin.wang/2018/04/17/Charles-抓取https报文/</id>
    <published>2018-04-17T08:27:42.000Z</published>
    <updated>2019-05-19T14:44:32.006Z</updated>
    
    <content type="html"><![CDATA[<p>为了适配ios和Android两端的开发需求，后台将原来的接口升级为了https接口，这里记录下配置<code>Charles</code>抓取https接口协议报文的方法。使用下面方法请保证可以正常抓取http请求报文。</p><a id="more"></a><h2 id="在pc端安装Charles的根证书"><a href="#在pc端安装Charles的根证书" class="headerlink" title="在pc端安装Charles的根证书"></a>在pc端安装<code>Charles</code>的根证书</h2><blockquote><p>Help–&gt;SSL Proxying –&gt; Install Charles Root Certificate</p></blockquote><p><img src="/img/https_help_proxy_setting.png" alt></p><blockquote><p>在钥匙串中将证书添加信任</p></blockquote><p><img src="/img/https_charles_proxy_ca.png" alt></p><h2 id="在客户端安装Charles证书"><a href="#在客户端安装Charles证书" class="headerlink" title="在客户端安装Charles证书"></a>在客户端安装<code>Charles</code>证书</h2><blockquote><p>请保证<code>Charles</code>可以正常抓取手机上的http报文，这里以小米5安装证书为例。<br>Help–&gt;SSL Proxying –&gt; Install Charles Root Certificate……mobile Device or RemoteBrower</p></blockquote><p><img src="/img/https_help_device.png" alt></p><blockquote><p>获取证书的下载链接，在手机浏览器中输入链接下载证书</p></blockquote><p><img src="/img/https_client_crt.png" alt></p><p><img src="/img/https_android_down_crt.png" alt></p><blockquote><p>在手机上安装证书<br>设置–&gt;更多设置–&gt;系统安全–&gt; 从存储设备安装  选取刚刚下载的证书安装(名称可以随便取)</p></blockquote><p><img src="/img/https_android_crt_install.png" alt></p><h3 id="证书安装失败问题"><a href="#证书安装失败问题" class="headerlink" title="证书安装失败问题"></a>证书安装失败问题</h3><blockquote><p>最开始我是通过小米5自带的浏览器下载证书，并且直接安装的，但是提示下面错误</p></blockquote><p><img src="/img/https_android_crt_error.png" alt></p><blockquote><p>最终问题解决是通过UC浏览器下载证书，并通过上面的方式安装。</p></blockquote><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><blockquote><p>在Proxy–&gt; SSL Proxying Settins中添加抓取连接的代理</p></blockquote><p><img src="/img/https_proxy.png" alt></p><blockquote><p>以抓取简书的接口为例,在<code>Host</code>中配置域名，在<code>port</code>中配置端口。通常http的默认端口为80，https的默认端口为443。</p></blockquote><p><img src="/img/https_ssl_proxying_settings.png" alt></p><blockquote><p>抓取日志如下<br><img src="/img/https_charles_jiansu.png" alt></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了适配ios和Android两端的开发需求，后台将原来的接口升级为了https接口，这里记录下配置&lt;code&gt;Charles&lt;/code&gt;抓取https接口协议报文的方法。使用下面方法请保证可以正常抓取http请求报文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Charles" scheme="https://androidhuilin.wang/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>getter()模板技巧</title>
    <link href="https://androidhuilin.wang/2018/04/08/getter-%E6%A8%A1%E6%9D%BF%E6%8A%80%E5%B7%A7/"/>
    <id>https://androidhuilin.wang/2018/04/08/getter-模板技巧/</id>
    <published>2018-04-08T07:52:22.000Z</published>
    <updated>2019-05-19T14:44:31.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通常在处理bean类的时候，我们会通过AS的模板功能添加setter()和getter()方法,这种操作相当方便。但有些时候不能适应我们所有的需求，下面记录下适应具体需求时的一些修改。</p></blockquote><a id="more"></a><h2 id="定义全局变量时以’m’开头"><a href="#定义全局变量时以’m’开头" class="headerlink" title="定义全局变量时以’m’开头"></a>定义全局变量时以’m’开头</h2><blockquote><p>有人喜欢在定义变量时加个前缀，用来区分全局变量、静态变量、局部变量等，例如常用的成员变量前缀为m。如果添加了前缀，在生成get\set方法时，方法名会带上这个前缀,如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getmName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>避免方法名携带前缀字段可以尝试用下面的方法</p><p>进入AS的<code>Preferences</code>界面，<code>Editor--&gt;Code Style--&gt;Java</code>,在’Name Prefix’中添加前缀字段，例如’m’</p><p><img src="/img/getter.png" alt></p><p>重新生成’get’方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Getter-模板修改–自动处理-null-判断"><a href="#Getter-模板修改–自动处理-null-判断" class="headerlink" title="Getter 模板修改–自动处理 null 判断"></a>Getter 模板修改–自动处理 null 判断</h2><blockquote><p>开发中会经常遇到实体类的一些属性未初始化造成的空指针异常，尤其是跟后台定义的接口实体类，由于解析或其他问题属性未初始化在调用时直接报空指针异常。<br>实体类中常见的有<code>String</code>类型和<code>List</code>类型，我们可以修改下<code>get</code>方法的模板，在使用属性时做一层非空处理。 <a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650825268&amp;idx=1&amp;sn=449a6d4a71872560fcb087f41e7ec7cc&amp;chksm=80b7b6aab7c03fbc17a4cb6f1dd96ebfd99244c311fff2e3cb2cc613a3cfdfc1b0e12f71478a&amp;scene=38#wechat_redirect" target="_blank" rel="noopener">参考链接</a></p></blockquote><p>修改后生成代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String mName;</span><br><span class="line">   <span class="keyword">private</span> List&lt;String&gt; mList;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> mName == <span class="keyword">null</span> ? <span class="string">""</span> : mName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mList == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> mList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>修改生成<code>get</code>的模板方法如下</p><ol><li><p>进入生成<code>get</code>方法的弹窗界面，点击右上角进入模板编辑界面</p><p><img src="/img/getter_select.png" alt></p></li><li><p>新建代码模板,修改模板代码如下(可以复制原来模板中的内容主要修改了<code>$(name){…}</code>中的return规则)</p><p><img src="/img/getter_templete.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#if($field.modifierStatic)</span><br><span class="line">static ##</span><br><span class="line">#end</span><br><span class="line">$field.type ##</span><br><span class="line">#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))))</span><br><span class="line">#if ($field.boolean &amp;&amp; $field.primitive)</span><br><span class="line">  #if ($StringUtil.startsWithIgnoreCase($name, 'is'))</span><br><span class="line">    #set($name = $StringUtil.decapitalize($name))</span><br><span class="line">  #else</span><br><span class="line">    is##</span><br><span class="line">#end</span><br><span class="line">#else</span><br><span class="line">  get##</span><br><span class="line">#end</span><br><span class="line">$&#123;name&#125;() &#123;</span><br><span class="line">  #if ($field.string)</span><br><span class="line">     <span class="keyword">return</span> $field.name == <span class="keyword">null</span> ? <span class="string">""</span> : $field.name;</span><br><span class="line">  #else </span><br><span class="line">    #if ($field.list)</span><br><span class="line">    <span class="keyword">if</span> ($field.name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $field.name;</span><br><span class="line">    #else </span><br><span class="line">    <span class="keyword">return</span> $field.name;</span><br><span class="line">    #end</span><br><span class="line">  #end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通常在处理bean类的时候，我们会通过AS的模板功能添加setter()和getter()方法,这种操作相当方便。但有些时候不能适应我们所有的需求，下面记录下适应具体需求时的一些修改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="AndroidStudio" scheme="https://androidhuilin.wang/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>build.gradle的常用配置</title>
    <link href="https://androidhuilin.wang/2018/03/26/build-gradle%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://androidhuilin.wang/2018/03/26/build-gradle的常用配置/</id>
    <published>2018-03-26T08:27:53.000Z</published>
    <updated>2019-05-19T14:44:31.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇主要记录下<code>build.gradle</code>文件的常用配置，例如修改打包命名和路径、统一管理多<code>moudle</code>的依赖库版本等。根据项目中具体用到的配置，这篇也会持续更新。<a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><a id="more"></a><h2 id="修改apk名称"><a href="#修改apk名称" class="headerlink" title="修改apk名称"></a>修改apk名称</h2><blockquote><p>通过AS工具打包默认命名规则为<code>app-debug.apk</code>或者<code>app-release.apk</code>。实际使用中可能需要命名规则中包含更多信息，例如版本名称、打包时间、渠道信息等。这种效果可以在项目的<code>build.gradle</code>文件中添加配置信息来实现。</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    修改打包后app命名开始</span></span><br><span class="line">    <span class="keyword">def</span> today = <span class="keyword">new</span> Date().format(<span class="string">'MMddHHmm'</span>)</span><br><span class="line">    <span class="keyword">def</span> name = <span class="keyword">new</span> String(defaultConfig.applicationId)</span><br><span class="line">            .substring(defaultConfig.applicationId.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>)</span><br><span class="line">    android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</span><br><span class="line">            <span class="keyword">def</span> <span class="keyword">file</span> = output.outputFile</span><br><span class="line">            output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="keyword">file</span>.parent, name + <span class="string">"_"</span> + buildType.name + <span class="string">"_V"</span> + defaultConfig.versionName + <span class="string">"_"</span> + today + <span class="string">".apk"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    修改打包后app命名结束</span></span><br></pre></td></tr></table></figure><p>gradle3.0之后需要使用下面方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改打包命名开始</span></span><br><span class="line">   <span class="keyword">def</span> today = <span class="keyword">new</span> Date().format(<span class="string">'MMddHHmm'</span>)</span><br><span class="line">   <span class="keyword">def</span> name = <span class="keyword">new</span> String(defaultConfig.applicationId)</span><br><span class="line">           .substring(defaultConfig.applicationId.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>)</span><br><span class="line">   android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">       variant.outputs.all &#123;</span><br><span class="line">           outputFileName = name + <span class="string">"_"</span> + buildType.name + <span class="string">"_V"</span> + defaultConfig.versionName + <span class="string">"_"</span> + today+<span class="string">".apk"</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//修改打包命名结束</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:right">column</th></tr></thead><tbody><tr><td style="text-align:left">output.outputFile.parent</td><td style="text-align:right">生成apk的路径，这个是默认路径在项目/app/build/outpus/apk</td></tr><tr><td style="text-align:left">buildType.name</td><td style="text-align:right">编译类型，就是debug或者release</td></tr><tr><td style="text-align:left">defaultConfig.versionName</td><td style="text-align:right">在defaultConfig标签下写的版本号</td></tr><tr><td style="text-align:left">today</td><td style="text-align:right">定义的打包时间字符串</td></tr></tbody></table><h2 id="统一依赖库版本管理"><a href="#统一依赖库版本管理" class="headerlink" title="统一依赖库版本管理"></a>统一依赖库版本管理</h2><blockquote><p>如果项目中存在多个moudle的话，为了避免moudle的依赖库版本不统一导致重复依赖，最好统一配置依赖版本。下面提供两种配置方式。</p></blockquote><h3 id="在顶级build-gradle文件中配置依赖版本信息"><a href="#在顶级build-gradle文件中配置依赖版本信息" class="headerlink" title="在顶级build.gradle文件中配置依赖版本信息"></a>在顶级<code>build.gradle</code>文件中配置依赖版本信息</h3><ol><li>在顶级<code>build.gradle</code>文件中添加<code>ext</code>代码块</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.0.1'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    compileSdkVersion = <span class="number">26</span></span><br><span class="line">    minSdkVersion = <span class="number">19</span></span><br><span class="line">    targetSdkVersion = <span class="number">26</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">'1.0'</span></span><br><span class="line"></span><br><span class="line">    supportLibraryVersion=<span class="string">'26.1.0'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在各个<code>moudle</code>的<code>build.gradle</code>引用配置信息</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// Use the following syntax to access properties you defined at the project level:</span></span><br><span class="line">  <span class="comment">// rootProject.ext.property_name</span></span><br><span class="line">  compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">  buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.android.support:appcompat-v7:$&#123;rootProject.ext.supportLibVersion&#125;"</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在gradle-properties文件中配置依赖版本信息"><a href="#在gradle-properties文件中配置依赖版本信息" class="headerlink" title="在gradle.properties文件中配置依赖版本信息"></a>在<code>gradle.properties</code>文件中配置依赖版本信息</h3><ol><li>在<code>gralde.properties</code>文件中添加依赖版本信息</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># When configured, Gradle will run in incubating parallel mode.</span><br><span class="line"># <span class="keyword">This</span> option should only be used with decoupled projects. More details, visit</span><br><span class="line"># http:<span class="comment">//www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span></span><br><span class="line"># org.gradle.parallel=<span class="keyword">true</span></span><br><span class="line">TARGET_SDK_VERSION=<span class="number">21</span></span><br><span class="line">COMPILE_SDK_VERSION=<span class="number">25</span></span><br><span class="line">BUILD_TOOL_SVERSION=<span class="number">25.0</span>.<span class="number">2</span></span><br><span class="line">MIN_SDK_VERSION=<span class="number">14</span></span><br><span class="line">SUPPORT_VERSION=<span class="number">25.4</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在各个<code>moudle</code>的<code>build.gradle</code>引用配置信息</li></ol><blockquote><p>在<code>gradle.properties</code>中配置的信息会作为字符串处理，如果参数需要数值类型的话需要在后面添加<code>as int</code></p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// Use the following syntax to access properties you defined at the project level:</span></span><br><span class="line">  <span class="comment">// rootProject.ext.property_name</span></span><br><span class="line">  compileSdkVersion COMPILE_SDK_VERSION as <span class="keyword">int</span></span><br><span class="line">  buildToolsVersion BUILD_TOOL_SVERSION</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.android.support:appcompat-v7:$&#123;SUPPORT_VERSION&#125;"</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:'</span> + SUPPORT_VERSION</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="与应用代码共享自定义字段和资源"><a href="#与应用代码共享自定义字段和资源" class="headerlink" title="与应用代码共享自定义字段和资源"></a>与应用代码共享自定义字段和资源</h2><blockquote><p>在构建时，Gradle 将生成 BuildConfig 类，以便应用代码可以检查与当前构建有关的信息。可以使用 buildConfigField() 函数，将自定义字段添加到 Gradle 构建配置文件的 BuildConfig 类中，然后在应用的运行时代码中访问这些值。同样，也可以使用 resValue() 添加应用资源值。<a href="https://developer.android.com/studio/build/gradle-tips.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  </span><br><span class="line">  buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">      <span class="comment">// These values are defined only for the release build, which</span></span><br><span class="line">      <span class="comment">// is typically used for full builds and continuous builds.</span></span><br><span class="line">      buildConfigField(<span class="string">"String"</span>, <span class="string">"BUILD_TIME"</span>, <span class="string">"\"$&#123;minutesSinceEpoch&#125;\""</span>)<span class="comment">//在BuildConfild类中生成BUILD_TIME字段</span></span><br><span class="line">      resValue(<span class="string">"string"</span>, <span class="string">"build_time"</span>, <span class="string">"$&#123;minutesSinceEpoch&#125;"</span>) <span class="comment">// 在资源文件中生成build_time 字符串，目录为app/build/generated/res/resValues/[flavor-name]/[buildType]/values/generated.xml</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    debug &#123;</span><br><span class="line">      <span class="comment">// Use static values for incremental builds to ensure that</span></span><br><span class="line">      <span class="comment">// resource files and BuildConfig aren't rebuilt with each run.</span></span><br><span class="line">      <span class="comment">// If they were dynamic, they would prevent certain benefits of</span></span><br><span class="line">      <span class="comment">// Instant Run as well as Gradle UP-TO-DATE checks.</span></span><br><span class="line">      buildConfigField(<span class="string">"String"</span>, <span class="string">"BUILD_TIME"</span>, <span class="string">"\"0\""</span>)</span><br><span class="line">      resValue(<span class="string">"string"</span>, <span class="string">"build_time"</span>, <span class="string">"0"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在应用代码中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Log.i(TAG, BuildConfig.BUILD_TIME);</span><br><span class="line">Log.i(TAG, getString(R.string.build_time));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇主要记录下&lt;code&gt;build.gradle&lt;/code&gt;文件的常用配置，例如修改打包命名和路径、统一管理多&lt;code&gt;moudle&lt;/code&gt;的依赖库版本等。根据项目中具体用到的配置，这篇也会持续更新。&lt;a href=&quot;https://developer.android.com/studio/build/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://androidhuilin.wang/categories/Android/"/>
    
    
      <category term="gradle" scheme="https://androidhuilin.wang/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>RoundImageView</title>
    <link href="https://androidhuilin.wang/2018/03/14/RoundImageView/"/>
    <id>https://androidhuilin.wang/2018/03/14/RoundImageView/</id>
    <published>2018-03-14T03:21:06.000Z</published>
    <updated>2019-05-19T14:44:32.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在项目中我们会经常用到圆形图片的情况，但是谷歌官方并没有提供这种视图控件，通常我们使用自定义视图来实现。<br>这个<a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="noopener">CircleImageView</a>是我们以前项目中用到的一个<br>实现圆形图片的控件。最近有时间所以研究了一下源码，圆形图片主要是通过BitmapShader来实现，代码也比较容易理解对刚开始研究<br>自定义视图的同学还是很有帮助的。另外我也简单修改了源码实现圆角图片和圆形图片的功能。</p></blockquote><a id="more"></a><h2 id="定义视图属性"><a href="#定义视图属性" class="headerlink" title="定义视图属性"></a>定义视图属性</h2><blockquote><p> 明确自定义视图要实现的功能，并为其功能定义配置的属性信息。这里我想实现的是带有边框的圆角或者圆形的视图，并且边框的宽度、颜色、是否覆盖图片，圆角图片的圆角半径等功能都可动态配置。所以定义视图属性主要如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"RoundImageView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_border_width"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span><span class="comment">&lt;!--边框宽度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_border_color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span><span class="comment">&lt;!--边框颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_border_overlay"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span><span class="comment">&lt;!--边框是否覆盖图片--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_background_color"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span><span class="comment">&lt;!--背景颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_oval"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span><span class="comment">&lt;!--圆形/圆角矩形--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"round_corner_radius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span><span class="comment">&lt;!--圆角半径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义RoundImageView继承系统ImageView"><a href="#自定义RoundImageView继承系统ImageView" class="headerlink" title="自定义RoundImageView继承系统ImageView"></a>自定义RoundImageView继承系统ImageView</h2><h3 id="画笔的初始化"><a href="#画笔的初始化" class="headerlink" title="画笔的初始化"></a>画笔的初始化</h3><blockquote><p>整个视图我们可以理解为有三部分：背景、图片、边框。每一部分是独立绘制的，这里需要初始化三种类型的画笔。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mBitmapShader = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">        <span class="comment">//图片画笔</span></span><br><span class="line">        mBitmapPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mBitmapPaint.setShader(mBitmapShader);</span><br><span class="line">        <span class="comment">//边框画笔</span></span><br><span class="line">        mBorderPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mBorderPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mBorderPaint.setColor(mBorderColor);</span><br><span class="line">        mBorderPaint.setStrokeWidth(mBorderWidth);</span><br><span class="line">        <span class="comment">//背景画笔</span></span><br><span class="line">        mCircleBackgroundPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mCircleBackgroundPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mCircleBackgroundPaint.setColor(mCircleBackgroundColor);</span><br></pre></td></tr></table></figure><p>上面图片画笔设置了<code>BitmapShader</code>为着色器。所谓着色器我是这样理解的，例如上面边框画笔设置了一个颜色值，画笔在视图画布上绘制的时候会让每个像素都绘制成相应颜色，直到绘制完整个视图。<br>如果像图片画笔那样设置了<code>BitmapShader</code>为着色器，画笔在绘制的时候会让着色器携带的图片绘制在视图上。如果图片大小不足以占满整个视图，画笔会根据<code>Shader.TileMode</code>来充满整个视图。<br><code>CLAMP</code>用边缘色彩填充多余空间、<code>MIRROR</code>重复使用镜像模式的图像来填充多余空间 、<code>REPEAT</code>重复原图像来填充多余空间。</p><h3 id="视图区域的计算"><a href="#视图区域的计算" class="headerlink" title="视图区域的计算"></a>视图区域的计算</h3><blockquote><p>视图绘制区域的计算逻辑也比较好理解，主要做了兼容视图的padding属性的处理。另外，如果是圆形视图，绘制区域会以较短的边作为半径，既绘制区域内最大内切圆。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算可绘制的区域</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> RectF <span class="title">calculateBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> availableWidth = getWidth() - getPaddingLeft() - getPaddingRight();</span><br><span class="line">       <span class="keyword">int</span> availableHeight = getHeight() - getPaddingTop() - getPaddingBottom();</span><br><span class="line">       <span class="keyword">if</span> (mIsOval) &#123;</span><br><span class="line">           <span class="keyword">int</span> sideLength = Math.min(availableWidth, availableHeight);</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 如果是圆形图片，则选取较短的边作为直径，较长的一边位置居中</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">float</span> left = getPaddingLeft() + (availableWidth - sideLength) / <span class="number">2f</span>;</span><br><span class="line">           <span class="keyword">float</span> top = getPaddingTop() + (availableHeight - sideLength) / <span class="number">2f</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> RectF(left, top, left + sideLength, top + sideLength);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> RectF(getPaddingLeft(), getPaddingTop(), getPaddingLeft() + availableWidth, getPaddingTop() + availableHeight);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面计算的是视图内可绘制的最大区域，边框，图片、背景都应该在这个区域内绘制。不过属性中定义了<code>round_border_overlay</code>边框是否覆盖图片这个配置属性，所以当边框不是覆盖在图片上时，图片的可绘制区域应减少边框的宽度大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mBorderRect.set(calculateBounds());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      mDrawableRect.set(mBorderRect);</span><br><span class="line">      <span class="keyword">if</span> (!mBorderOverlay &amp;&amp; mBorderWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 当绘制圆角矩形时，圆角四周和border边框会有留白,所以适当增加图片的绘制区域</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          mDrawableRect.inset(mBorderWidth - <span class="number">1f</span>, mBorderWidth - <span class="number">1f</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="图片的缩放处理"><a href="#图片的缩放处理" class="headerlink" title="图片的缩放处理"></a>图片的缩放处理</h3><blockquote><p>图片的可绘制区域确定后为了更好的显示效果，需要根据图片绘制区域和图片的大小进行缩放处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateShaderMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> scale;</span><br><span class="line">        <span class="keyword">float</span> dx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> dy = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        mShaderMatrix.set(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 缩放值按照Math.max(Vw/Bw,Vh/Bh)，即图片的宽或高比上视图的宽或高最大值来计算，较小的一边通过计算偏移量居中。</span></span><br><span class="line"><span class="comment"> * 保证缩放后的图片占满视图。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="keyword">if</span> (mBitmapWidth * mDrawableRect.height() &gt; mDrawableRect.width() * mBitmapHeight) &#123;</span><br><span class="line">            scale = mDrawableRect.height() / (<span class="keyword">float</span>) mBitmapHeight;</span><br><span class="line">            dx = (mDrawableRect.width() - mBitmapWidth * scale) * <span class="number">0.5f</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            scale = mDrawableRect.width() / (<span class="keyword">float</span>) mBitmapWidth;</span><br><span class="line">            dy = (mDrawableRect.height() - mBitmapHeight * scale) * <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mShaderMatrix.setScale(scale, scale);</span><br><span class="line">        mShaderMatrix.postTranslate((<span class="keyword">int</span>) (dx + <span class="number">0.5f</span>) + mDrawableRect.left, (<span class="keyword">int</span>) (dy + <span class="number">0.5f</span>) + mDrawableRect.top);</span><br><span class="line"></span><br><span class="line">        mBitmapShader.setLocalMatrix(mShaderMatrix);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>CircleImageView</code>的源码中是通过 <code>mBitmapWidth * mDrawableRect.height() &gt; mDrawableRect.width() * mBitmapHeight</code>判断来计算缩放比的，刚开始一直没明白这种算法。后来又参考了网上其他图片缩放的一些算法明白了它的计算方式。<br>为了保证缩放后的图片能能够占满整个视图，缩放值scale=Math.max(视图高/图片高，视图宽/图片宽)，这个算法的变形就是上面的形式。</p><h3 id="视图绘制"><a href="#视图绘制" class="headerlink" title="视图绘制"></a>视图绘制</h3><blockquote><p>画笔、绘制区域、图片缩放等逻辑都处理好后，接下来就是视图的绘制。重写<code>onDraw()</code>方法。根据圆角或者圆形调用canvas.drawRoundRect或者canvas.drawCircle方法绘制视图。<br>绘制边框是需要注意，画笔设置了<code>setStrokeWidth</code>属性，绘制区域为绘制区域中心到<code>strokWidth</code>中心的距离，所以绘制边框时需要将绘制区域向内缩小<code>strokeWidth/2</code>的大小，保证边框完全显示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (mIsOval) &#123;</span><br><span class="line">            <span class="comment">// 绘制圆形</span></span><br><span class="line">            <span class="keyword">if</span> (mCircleBackgroundColor != Color.TRANSPARENT) &#123;</span><br><span class="line">                canvas.drawCircle(mDrawableRect.centerX(), mDrawableRect.centerY(), mDrawableRect.width() / <span class="number">2f</span>, mCircleBackgroundPaint);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawCircle(mDrawableRect.centerX(), mDrawableRect.centerY(), mDrawableRect.width() / <span class="number">2f</span>, mBitmapPaint);</span><br><span class="line">            <span class="keyword">if</span> (mBorderWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//                绘制圆形的半径等于圆心到画笔宽度中心的距离</span></span><br><span class="line">                canvas.drawCircle(mBorderRect.centerX(), mBorderRect.centerY(), mBorderRect.width() / <span class="number">2f</span> - mBorderWidth / <span class="number">2f</span>, mBorderPaint);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 绘制圆角矩形</span></span><br><span class="line">            <span class="keyword">if</span> (mCircleBackgroundColor != Color.TRANSPARENT) &#123;</span><br><span class="line">                canvas.drawRoundRect(mDrawableRect, mRadius, mRadius, mCircleBackgroundPaint);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawRoundRect(mDrawableRect, mRadius, mRadius, mBitmapPaint);</span><br><span class="line">            <span class="keyword">if</span> (mBorderWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                RectF rectF = <span class="keyword">new</span> RectF(mBorderRect);</span><br><span class="line">                <span class="comment">//                绘制圆角矩形的宽/高等于矩形中心到上/下画笔宽度中心的距离</span></span><br><span class="line">                rectF.inset(mBorderWidth / <span class="number">2f</span>, mBorderWidth / <span class="number">2f</span>);</span><br><span class="line">                canvas.drawRoundRect(rectF, mRadius, mRadius, mBorderPaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><a href="https://github.com/violinlin/ViolinDemo/blob/master/imageview/src/main/java/com/violin/imageview/RoundImageView.java" target="_blank" rel="noopener">源码地址</a></p><p><img src="/img/roundimageview.png" alt="RoundImageView"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在项目中我们会经常用到圆形图片的情况，但是谷歌官方并没有提供这种视图控件，通常我们使用自定义视图来实现。&lt;br&gt;这个&lt;a href=&quot;https://github.com/hdodenhof/CircleImageView&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CircleImageView&lt;/a&gt;是我们以前项目中用到的一个&lt;br&gt;实现圆形图片的控件。最近有时间所以研究了一下源码，圆形图片主要是通过BitmapShader来实现，代码也比较容易理解对刚开始研究&lt;br&gt;自定义视图的同学还是很有帮助的。另外我也简单修改了源码实现圆角图片和圆形图片的功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://androidhuilin.wang/categories/Android/"/>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
      <category term="自定义view" scheme="https://androidhuilin.wang/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>布局优化</title>
    <link href="https://androidhuilin.wang/2018/01/02/%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/"/>
    <id>https://androidhuilin.wang/2018/01/02/布局优化/</id>
    <published>2018-01-02T07:03:12.000Z</published>
    <updated>2019-05-17T09:01:18.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>布局优化，主要了解<code>include</code>、<code>merge</code>、<code>ViewSub</code>标签的作用</p></blockquote><a id="more"></a><h2 id="include-标签"><a href="#include-标签" class="headerlink" title="include 标签"></a><code>include</code> 标签</h2><blockquote><p><code>include</code> 标签主要用来布局的复用，当然如果当前界面的布局太复杂，为了布局代码的整洁，也可以将部分模块的抽出为单独布局，再通过<code>include</code>标签引入。<a href="https://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><p><code>include</code> 标签的使用也比较简单。新建复用布局<code>titlebar_layout</code>，在目标布局中引入位置添加<code>&lt;include layout=&quot;@layout/titlebar_layout&quot;/&gt;</code>即可。<br>需要注意的是<code>include</code>标签只支持<code>layout_</code> 开头的属性例如<code>layout_margin</code>等。<strong>使layout_属性生效的前提是添加了layout_width、layout_height属性</strong>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">"@layout/titlebar_layout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br></pre></td></tr></table></figure><p><em>另外，在复用的布局中使用<code>tools:showIn=&quot;@layout/目标布局</code>可以在复用布局中看到整体的预览</em></p><h2 id="merge-标签"><a href="#merge-标签" class="headerlink" title="merge 标签"></a><code>merge</code> 标签</h2><blockquote><p><code>merge</code> 标签的作用是用来减少视图层级中多余的一层<code>ViewGroup</code>容器。<a href="https://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><p><code>merge</code>通常和<code>include</code>标签搭配使用，如果复用布局中的根布局和目标布局中引入<code>include</code>标签的父布局相同的话，复用布局的根标签可以改成<code>merge</code>，从而减少一层ViewGroup的嵌套。</p><h3 id="merge在自定义布局中的应用"><a href="#merge在自定义布局中的应用" class="headerlink" title="merge在自定义布局中的应用"></a><code>merge</code>在自定义布局中的应用</h3><blockquote><p>这里的自定义布局并不是通常的重写<code>onMearuse()、onLayout()、onDraw()</code>。上面提到，<code>merge</code>标签用来减少多余一层<code>ViewGroup</code>容器的复用，这里可以将布局文件的根标签抽取出来，以自定义View继承的方式实现，同时布局文件中的根布局标签改为<code>merge</code></p></blockquote><p>例如现在想要将下面的布局自定义为一个View</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.将布局文件的根部局以自定义View的形式抽出</p><blockquote><p>自定义View 最好提供多种构造器满足不同形式的需求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TabItemView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span></span>&#123;</span><br><span class="line"><span class="comment">// 直接实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TabItemView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 通过布局文件实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TabItemView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        setLayoutParams(<span class="keyword">new</span> RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));</span><br><span class="line">        <span class="comment">// 布局文件中根部局为merge标签，所以第三个参数应为this,当前继承的ViewGroup 为视图的根部局</span></span><br><span class="line">        inflate(context, R.layout.tabitem,<span class="keyword">this</span>);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改原来布局根标签为<code>merge</code> 减少布局的嵌套</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.引用自定义布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//在布局文件的引用</span></span><br><span class="line">  &lt;包名.tab.TabItemView</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span>/&gt;</span><br><span class="line"><span class="comment">//在代码中的引用</span></span><br><span class="line">TabItemView itemView=<span class="keyword">new</span> TabItemView(getBaseContext();</span><br></pre></td></tr></table></figure><p><strong>PS.因为布局文件中根标签为merge,在inflate(context, R.layout.tabitem,this)第三个参数需要为this,依赖当前布局为父布局</strong></p><h2 id="ViewSub-标签"><a href="#ViewSub-标签" class="headerlink" title="ViewSub 标签"></a><code>ViewSub</code> 标签</h2><blockquote><p><code>ViewSub</code> 是一个轻量级的View,没有尺寸，只有setVisibility(VISIBLE)或者inflate()方法调用时才会绘制对应的布局。所以<code>ViewSub</code>适合界面中不是每次都会绘制的一些布局。例如列表界面中的空数据界面。<a href="https://developer.android.com/reference/android/view/ViewStub.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>在布局文件中声明<code>ViewSub</code>标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/stub_empty"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:inflatedId</span>=<span class="string">"@+id/inflate_empry"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout</span>=<span class="string">"@layout/widget_empty_layout"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>在代码中按需加载ViewSub</p><blockquote><p>当ViewSub调用setVisibility(VISIBLE)或者inflate()方法前，通过<code>android:inflatedId=&quot;@+id/inflate_empry&quot;</code> 拿到的视图为空；调用之后ViewSub将会被它对应的布局所替代可以通过<code>android:id=&quot;@+id/stub_empty&quot;</code>拿到对应的布局内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (emptyView == <span class="keyword">null</span>) &#123;</span><br><span class="line"> emptyStub = (ViewStub) findViewById(R.id.stub_empty);</span><br><span class="line"> emptyStub.inflate();</span><br><span class="line"> emptyView = findViewById(R.id.inflate_empry);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>PS: inflate() 方法只能被调用一次，如果再次调用会报异常信息 ViewStub must have a non-null ViewGroup viewParent。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;布局优化，主要了解&lt;code&gt;include&lt;/code&gt;、&lt;code&gt;merge&lt;/code&gt;、&lt;code&gt;ViewSub&lt;/code&gt;标签的作用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://androidhuilin.wang/categories/Android/"/>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动模式</title>
    <link href="https://androidhuilin.wang/2017/11/15/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://androidhuilin.wang/2017/11/15/Activity启动模式/</id>
    <published>2017-11-15T09:42:14.000Z</published>
    <updated>2019-05-17T08:47:59.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h1><a id="more"></a><h2 id="清单文件中配置启动模式launchMode"><a href="#清单文件中配置启动模式launchMode" class="headerlink" title="清单文件中配置启动模式launchMode"></a>清单文件中配置启动模式<code>launchMode</code></h2><p><a href="https://developer.android.google.cn/guide/topics/manifest/activity-element.html#lmode" target="_blank" rel="noopener">官方文档</a></p><p><img src="/img/launchmode.png" alt="launch mode"></p><h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><blockquote><p>设置A Activity的启动模式为<code>singleTask</code>,启动顺序为<code>A--&gt;B--&gt;C--&gt;A</code>各Activity的生命周期如下: 按照启动顺序，各个界面依次调用<code>onCreate()</code>方法。当从<code>C</code>启动到<code>A</code>时，<code>B</code>界面走了<code>onDestory()</code>方法，<code>A</code>界面不会重新创建，走了<code>onNewIntent()</code>方法，随后<code>C</code>界面销毁走<code>onDestory()</code>方法</p></blockquote><p><strong>当Activity的启动模式设置为<code>singleTask</code>时，任务栈中只会创建一次这个Activity的对象，当重复启动该Activity时会调用<code>onNewIntent()</code>方法，而不是<code>onCreate()</code>方法，同时会将任务栈中该Activity上面的Activity清除出栈。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D/whl: AActivity------onCreate</span><br><span class="line">D/whl: BActivity------onCreate</span><br><span class="line">D/whl: CActivity------onCreate</span><br><span class="line">D/whl: BActivity------onDestroy</span><br><span class="line">D/whl: AActivity------onNewIntent</span><br><span class="line">D/whl: CActivity------onDestroy</span><br></pre></td></tr></table></figure><h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><blockquote><p>设置B Activity的启动模式为<code>singleTop</code>,启动顺序为<code>A--&gt;B--&gt;B</code>各Activity的生命周期如下: 从<code>A</code>启动到<code>B</code>，这时<code>BActivity</code>位于栈顶，再次跳转<code>BActivity</code>时，界面不会重新创建，走<code>onNewIntent()</code>方法</p></blockquote><p><strong>当Activity的启动模式设置为<code>singleTop</code>时，任务栈中允许创建多个该Activity的对象。但是，如果当该Activity位于任务栈顶时再次启动该界面，不会创建新的对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/whl: AActivity------onCreate</span><br><span class="line">D/whl: BActivity------onCreate</span><br><span class="line">D/whl: BActivity------onNewIntent</span><br></pre></td></tr></table></figure><h2 id="Intent中配置FLAG"><a href="#Intent中配置FLAG" class="headerlink" title="Intent中配置FLAG"></a>Intent中配置FLAG</h2><blockquote><p>关于Activity的启动模式除了在清单中静态配置<code>launchMode</code>之外，也可以在代码中通过设置Intent的FLAG动态设置。<a href="https://developer.android.google.cn/reference/android/content/Intent.html#setFlags%28int%29" target="_blank" rel="noopener">官方文档</a></p></blockquote><h3 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h3><blockquote><p>作用同<code>launchMode</code>设置<code>singleTop</code></p></blockquote><h3 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h3><blockquote><p>If set, and the activity being launched is already running in the current task, then instead of launching a new instance of that activity, all of the other activities on top of it will be closed and this Intent will be delivered to the (now on top) old activity as a new Intent.</p></blockquote><blockquote><p>按照官方文档的解释，当设置这个FLAG通过Intent启动目标Activity时，在栈中位于目标Activity之上的界面都会被清除出栈。目标Activity会位于栈顶，接受新的Intent。根据文档，我的理解是目标Activity的<code>onNewIntent()</code>方法会被调用，且不会创建新的对象。通过Demo来验证一下<code>A--&gt;B--&gt;C--&gt;B</code>。依次启动A、B、C界面，当C启动B时，设置<code>FLAG_ACTIVITY_CLEAR_TOP</code>FLAG。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AActivity------onCreate</span><br><span class="line">BActivity------onCreate</span><br><span class="line">CActivity------onCreate</span><br><span class="line">BActivity------onDestroy</span><br><span class="line">BActivity------onCreate</span><br><span class="line">CActivity------onDestroy</span><br></pre></td></tr></table></figure><p><strong>运行结果好像和文档描述不太一样，结论是设置<code>FLAG_ACTIVITY_CLEAR_TOP</code>FLAG启动目标Activity，会将栈中位于目标Activity上面的Activity清理出栈，和launchMode设置singleTask不同，这个FLAG同时导致目标Activity也会销毁然后重建</strong></p><p><em>Ps. 如果想要清除目标Activity上面的Activity，同时目标Activity不会重建可以设置FLAG<code>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP)</code></em></p><h3 id="FLAG-ACTIVITY-CLEAR-TASK"><a href="#FLAG-ACTIVITY-CLEAR-TASK" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TASK"></a>FLAG_ACTIVITY_CLEAR_TASK</h3><blockquote><p>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.</p></blockquote><blockquote><p>设置这个FLAG会清空Activity栈，但是使用会有问题，它需要搭配另外一个FLAG联合使用<code>intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK)</code><br>A–&gt;B–&gt;C 依次启动A、B、C当重B启动C时添加FLAG</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AActivity------onCreate</span><br><span class="line">BActivity------onCreate</span><br><span class="line">AActivity------onDestroy</span><br><span class="line">CActivity------onCreate</span><br><span class="line">BActivity------onDestroy</span><br></pre></td></tr></table></figure><p><strong>当设置<code>Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK</code>时，会清空当前任务栈，目标Activity重新创建，且位于新栈的最底部</strong></p><h3 id="FLAG-ACTIVITY-REORDER-TO-FRONT"><a href="#FLAG-ACTIVITY-REORDER-TO-FRONT" class="headerlink" title="FLAG_ACTIVITY_REORDER_TO_FRONT"></a>FLAG_ACTIVITY_REORDER_TO_FRONT</h3><blockquote><p>If set in an Intent passed to Context.startActivity(), this flag will cause the launched activity to be brought to the front of its task’s history stack if it is already running.<br>这个FLAG理解比较简单A–&gt;B–&gt;C–&gt;B 依次启动A、B、C，栈中的顺序为ABC,当从C启动B时设置<code>FLAG_ACTIVITY_REORDER_TO_FRONT</code>日志如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AActivity------onCreate</span><br><span class="line">BActivity------onCreate</span><br><span class="line">CActivity------onCreate</span><br><span class="line">BActivity------onNewIntent</span><br></pre></td></tr></table></figure><p><strong><code>B</code>界面会重新回到栈顶，<code>C</code>界面也没有出栈，栈中顺序改为了A–&gt;C–&gt;B。但是使用中存在一个问题，通过设置这个标签启动<code>B</code>到栈顶，如果按返回键日志显示<code>B</code>出栈<code>A</code>和<code>C</code>并没有出栈但是程序会退回到桌面，重新进入程序栈中顺序为A–&gt;C</strong></p><h2 id="目前就研究了这几个，有兴趣再研究其他的吧"><a href="#目前就研究了这几个，有兴趣再研究其他的吧" class="headerlink" title="目前就研究了这几个，有兴趣再研究其他的吧"></a>目前就研究了这几个，有兴趣再研究其他的吧</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Activity启动模式&quot;&gt;&lt;a href=&quot;#Activity启动模式&quot; class=&quot;headerlink&quot; title=&quot;Activity启动模式&quot;&gt;&lt;/a&gt;Activity启动模式&lt;/h1&gt;
    
    </summary>
    
      <category term="Android" scheme="https://androidhuilin.wang/categories/Android/"/>
    
    
      <category term="Activity" scheme="https://androidhuilin.wang/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊Android程序的运行内存</title>
    <link href="https://androidhuilin.wang/2017/10/09/%E7%AE%80%E5%8D%95%E8%81%8A%E8%81%8AAndroid%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98/"/>
    <id>https://androidhuilin.wang/2017/10/09/简单聊聊Android程序的运行内存/</id>
    <published>2017-10-09T09:41:17.000Z</published>
    <updated>2019-04-15T05:00:20.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每台手机允许程序的最大内存都不尽相同，如果你的设备已经root，可以查看系统文件获取；当然开发者也可以通过代码获取。</p></blockquote><a id="more"></a><h2 id="在获取了root权限的设备上查看-system-build-prop-文件，下面是小米5的文件内容"><a href="#在获取了root权限的设备上查看-system-build-prop-文件，下面是小米5的文件内容" class="headerlink" title="在获取了root权限的设备上查看/system/build.prop 文件，下面是小米5的文件内容"></a>在获取了root权限的设备上查看<code>/system/build.prop</code> 文件，下面是小米5的文件内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dalvik.vm.heapsize=512m  </span><br><span class="line">dalvik.vm.heapgrowthlimit=256m</span><br></pre></td></tr></table></figure><p>其中<code>heapgrowthlimit</code> 是普通应用的内存限制，当在清单文件中设置了<code>largeHeap=true</code>之后，可以使用的最大内存值</p><h2 id="通过代码获取最大运行内存"><a href="#通过代码获取最大运行内存" class="headerlink" title="通过代码获取最大运行内存"></a>通过代码获取最大运行内存</h2><blockquote><p>可以试着修改清单文件中<code>largeHeap</code>的配置，看下每次的打印值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long maxMemory=Runtime.getRuntime().maxMemory()/1024/1024;</span><br></pre></td></tr></table></figure><p>当然一般程序还是不建议设置<code>largeHeap=true</code>，我们更需要做的是内存的高效管理</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每台手机允许程序的最大内存都不尽相同，如果你的设备已经root，可以查看系统文件获取；当然开发者也可以通过代码获取。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android扩展" scheme="https://androidhuilin.wang/tags/Android%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>AS2.3后找不到SDKManager启动按钮解决方法</title>
    <link href="https://androidhuilin.wang/2017/10/09/AS2-3%E5%90%8E%E6%89%BE%E4%B8%8D%E5%88%B0SDKManager%E5%90%AF%E5%8A%A8%E6%8C%89%E9%92%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://androidhuilin.wang/2017/10/09/AS2-3后找不到SDKManager启动按钮解决方法/</id>
    <published>2017-10-09T07:01:57.000Z</published>
    <updated>2019-05-19T14:44:31.951Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以前总是习惯通过Preference–&gt; Android SDK下面的<code>Launch Standalone SDK Manage</code>按键启动SDK Manager 图形化界面。但是，最近更新了AS2.3.2后找不到启动按键了，这多少有点儿不适应，于是上网查找通过下面的方式启动SDK Manager。</p></blockquote><a id="more"></a><p><img src="/img/device_tools.png" alt="enter image description here"></p><p><img src="/img/SDK_Manager.png" alt="enter image description here"></p><p><img src="/img/SDKManager.png" alt="enter image description here"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以前总是习惯通过Preference–&amp;gt; Android SDK下面的&lt;code&gt;Launch Standalone SDK Manage&lt;/code&gt;按键启动SDK Manager 图形化界面。但是，最近更新了AS2.3.2后找不到启动按键了，这多少有点儿不适应，于是上网查找通过下面的方式启动SDK Manager。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="AndroidStudio" scheme="https://androidhuilin.wang/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>云服务器配置Tomcat</title>
    <link href="https://androidhuilin.wang/2017/09/05/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AETomcat/"/>
    <id>https://androidhuilin.wang/2017/09/05/云服务器配置Tomcat/</id>
    <published>2017-09-05T03:35:20.000Z</published>
    <updated>2019-05-19T14:44:32.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat</a>官网上选择适当的Tomcat版本，参考<a href="http://blog.androidhuilin.wang/2017/09/03/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEJDK/" target="_blank" rel="noopener">云服务器配置JDK</a>将Tomcat的安装包上传到服务器，并解压到相应目录(可以自定义)，这里我将Tomcat的包解压到了<code>/usr/local/tomcat/tomcat8/</code>目录下</p></blockquote><a id="more"></a><h2 id="1-解压好即可直接启动"><a href="#1-解压好即可直接启动" class="headerlink" title="1. 解压好即可直接启动"></a>1. 解压好即可直接启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 启动命令</span><br><span class="line">/usr/local/tomcat/tomcat8/bin/startup.sh</span><br><span class="line">2. 关闭命令</span><br><span class="line">/usr/local/tomcat/tomcat8/bin/shutdown.sh</span><br></pre></td></tr></table></figure><p>Tomcat默认端口号是8080，如果服务器没没有开放该端口，需要使用下面方法开放端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p>出现<code>success</code>表示添加成功<br>然后更新防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>测试Tomcat服务是否成功，浏览器输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[云服务器外网ip]:8080</span><br></pre></td></tr></table></figure><h2 id="2-配置启动脚本"><a href="#2-配置启动脚本" class="headerlink" title="2. 配置启动脚本"></a>2. 配置启动脚本</h2><blockquote><p>每次通过命令的全路径来启动/关闭服务也很麻烦，那么可以通过一个脚本来实现命令启动<code>Tomcat</code></p></blockquote><p>创建脚本<br>执行下面代码进入脚本编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi etc/init.d/tomcat</span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑模式，拷贝下面内容，按<code>esc</code>键退出编辑，输入<code>:wq</code>保存并退出<code>vim</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># !/bin/bash    </span><br><span class="line"># Description: start or stop the tomcat    </span><br><span class="line"># Usage:        tomcat [start|stop|restart]    </span><br><span class="line">#    </span><br><span class="line">export PATH=$PATH:$HOME/bin  </span><br><span class="line">export BASH_ENV=$HOME/.bashrc  </span><br><span class="line">export USERNAME=&quot;root&quot;  </span><br><span class="line">  </span><br><span class="line">case &quot;$1&quot; in  </span><br><span class="line">start)  </span><br><span class="line">#startup the tomcat    </span><br><span class="line">cd [tomcat安装目录]/bin  </span><br><span class="line">./startup.sh  </span><br><span class="line">;;  </span><br><span class="line">stop)  </span><br><span class="line"># stop tomcat    </span><br><span class="line">cd [tomcat安装目录]/bin</span><br><span class="line">./shutdown.sh  </span><br><span class="line">echo &quot;Tomcat Stoped&quot;  </span><br><span class="line">;;  </span><br><span class="line">restart)  </span><br><span class="line">$0 stop  </span><br><span class="line">$0 start  </span><br><span class="line">;;  </span><br><span class="line">*)  </span><br><span class="line">echo &quot;tomcat: usage: tomcat [start|stop|restart]&quot;  </span><br><span class="line">exit 1  </span><br><span class="line">esac  </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>为脚本添加执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/tomcat</span><br></pre></td></tr></table></figure><p>创建软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr/bin</span><br><span class="line">ln -s /etc/init.d/tomcat</span><br></pre></td></tr></table></figure><p>配置完成后测试是否有效，输入下面命令看Tomcat启动日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tomcat start</span><br><span class="line">tomcat stop</span><br><span class="line">tomcat restart</span><br></pre></td></tr></table></figure><h2 id="3-修改默认端口号"><a href="#3-修改默认端口号" class="headerlink" title="3.修改默认端口号"></a>3.修改默认端口号</h2><p>切换目录到<code>[tomcat根目录]/conf</code>,编辑<code>server.xml</code>修改<code>port</code>端口,然后重启tomcat。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Tomcat&lt;/a&gt;官网上选择适当的Tomcat版本，参考&lt;a href=&quot;http://blog.androidhuilin.wang/2017/09/03/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEJDK/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;云服务器配置JDK&lt;/a&gt;将Tomcat的安装包上传到服务器，并解压到相应目录(可以自定义)，这里我将Tomcat的包解压到了&lt;code&gt;/usr/local/tomcat/tomcat8/&lt;/code&gt;目录下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Server" scheme="https://androidhuilin.wang/categories/Server/"/>
    
    
      <category term="Server" scheme="https://androidhuilin.wang/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>云服务器配置JDK</title>
    <link href="https://androidhuilin.wang/2017/09/03/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEJDK/"/>
    <id>https://androidhuilin.wang/2017/09/03/云服务器配置JDK/</id>
    <published>2017-09-02T16:29:45.000Z</published>
    <updated>2019-05-19T14:44:31.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近看到了郭神在公众号里的京东云服务器优惠的推送，所以先买了两个月的体验版折腾一下。下面记录下在云服务器下配置JDK环境和Tomcat服务的过程。</p></blockquote><a id="more"></a><h2 id="1-上传JDK的包到云服务器"><a href="#1-上传JDK的包到云服务器" class="headerlink" title="1. 上传JDK的包到云服务器"></a>1. 上传JDK的包到云服务器</h2><blockquote><p>在云服务器上配置JDK首先需要在<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle</a>上找到适合云服务器系统的JDK版本。连接云服务器，切换或新建目录到JDK的安装目录<strong>安装目录可以自定义</strong>。下面以两种形式将JDK的包上传到云服务器。</p></blockquote><h3 id="1-1-通过-wget命令"><a href="#1-1-通过-wget命令" class="headerlink" title="1.1 通过 wget命令"></a>1.1 通过 <code>wget</code>命令</h3><blockquote><p>wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。<br>来自: <a href="http://man.linuxde.net/wget" target="_blank" rel="noopener">http://man.linuxde.net/wget</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p></blockquote><p>一般下载文件<code>wget命令</code>+下载URl就行了，但是我在下载JDK的时候不能正常下载。上网查询后得配置一些参数，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-从本地上传安装包到云服务器"><a href="#1-2-从本地上传安装包到云服务器" class="headerlink" title="1.2 从本地上传安装包到云服务器"></a>1.2 从本地上传安装包到云服务器</h3><blockquote><p>如果使用<code>wget</code>下载速度太慢，或者本地已经有了JDK的安装包，可以通过文件上传的方式将安装包上传到云服务器。这边我已mac为例上传问题。</p></blockquote><p>打开<code>终端</code>选择<code>新建远程连接</code><br><img src="/img/upload-shell.png" alt></p><p>选择<code>安全文件传输</code>，输入服务器的IP</p><p><img src="/img/connect.png" alt><br>输入主机名开始连接<br><img src="/img/sftp_connect.png" alt></p><p>输入密码提示连接成功后开始上传文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put 本地文件路径  远程主机路径</span><br></pre></td></tr></table></figure><h2 id="2-解压JDK安装包"><a href="#2-解压JDK安装包" class="headerlink" title="2.解压JDK安装包"></a>2.解压JDK安装包</h2><blockquote><p>把JDK的压缩包上传到服务器后，现在使用<code>tar</code>命令解压安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf [解压文件]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-配置JDK环境变量"><a href="#3-配置JDK环境变量" class="headerlink" title="3.配置JDK环境变量"></a>3.配置JDK环境变量</h2><blockquote><p>在电脑上为了方便使用JDK的命令我们一般都会配置环境变量。服务器上也是需要配置的。vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。修改<code>vi /etc/profile</code>文件，在最后添加JDK的配置路径。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set jdk environment  </span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_21  （此处根据你所安装jdk的路径实际来写）</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH</span><br></pre></td></tr></table></figure><h2 id="4-查看JDK是否配置成功"><a href="#4-查看JDK是否配置成功" class="headerlink" title="4.查看JDK是否配置成功"></a>4.查看JDK是否配置成功</h2><blockquote><p>到这里JDK的配置基本就完毕了，现在就是需要测试下配置又没有成功了</p></blockquote><p>使环境变量配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>检验JDK配置是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>正常显示JDK版本信息则配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_144&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_144-b01)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看到了郭神在公众号里的京东云服务器优惠的推送，所以先买了两个月的体验版折腾一下。下面记录下在云服务器下配置JDK环境和Tomcat服务的过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Server" scheme="https://androidhuilin.wang/categories/Server/"/>
    
    
      <category term="Server" scheme="https://androidhuilin.wang/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>WebView使用总结</title>
    <link href="https://androidhuilin.wang/2017/06/14/WebView%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://androidhuilin.wang/2017/06/14/WebView使用总结/</id>
    <published>2017-06-14T03:19:58.000Z</published>
    <updated>2019-05-19T14:44:32.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>WebView 实际上继承AbsoluteLayout,但是完全不支持ViewGroup的各种操作；无法查找里面的控件，也不能addView()</li><li>WebView内部的内容不是控件，而是屏幕绘制出来的内容，底层是一个浏览器引擎：webKit画出来的</li><li>webKit:一套开源的，支持多平台的浏览器引擎，几乎所有的android手机官方，默认浏览器，都使用了webkit ，能够将网页用图像的形式绘制出来，同时支持JavaScript和Html5的各种规范。</li></ol></blockquote><a id="more"></a><h2 id="1-WebView-加载方式"><a href="#1-WebView-加载方式" class="headerlink" title="1. WebView 加载方式"></a>1. WebView 加载方式</h2><h3 id="1-1-webView-loadUrl-String-url"><a href="#1-1-webView-loadUrl-String-url" class="headerlink" title="1.1 webView.loadUrl(String url)"></a>1.1 webView.loadUrl(String url)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载网络链接</span></span><br><span class="line">webView.loadUrl(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment">// 加载本地资源(test.html放在assets文件夹下)</span></span><br><span class="line">webView.loadUrl(<span class="string">"file:///android_asset/test.html"</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-webView-loadData-String-data-String-mimeType-String-encoding"><a href="#1-2-webView-loadData-String-data-String-mimeType-String-encoding" class="headerlink" title="1.2 webView.loadData(String data, String mimeType, String encoding)"></a>1.2 webView.loadData(String data, String mimeType, String encoding)</h3><p>用来加载html代码段，<strong>可能会出现页面编码问题，设置编码格式<code>text/html;charset=UTF-8</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String summary = <span class="string">"&lt;html&gt;&lt;body&gt;You scored &lt;b&gt;192&lt;/b&gt; points.&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line"> webview.loadData(summary, <span class="string">"text/html"</span>, <span class="keyword">null</span>);</span><br><span class="line"> <span class="comment">// 标签中包含中文会出现编码问题，设置编码格式</span></span><br><span class="line">  webView.loadData(summary, <span class="string">"text/html;charset=UTF-8"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-webView-loadDataWithBaseURL-String-baseUrl-String-data-String-mimeType-String-encoding-String-historyUrl"><a href="#1-3-webView-loadDataWithBaseURL-String-baseUrl-String-data-String-mimeType-String-encoding-String-historyUrl" class="headerlink" title="1.3 webView.loadDataWithBaseURL(String baseUrl, String data,String mimeType, String encoding, String historyUrl)"></a>1.3 webView.loadDataWithBaseURL(String baseUrl, String data,String mimeType, String encoding, String historyUrl)</h3><p>和<code>loadData()</code>方法相似都是加载html代码段，但是多了<code>baseUrl,和historyUrl</code>，<strong>因为html中<code>css</code>和图片等资源大都使用相对路径，定义了<code>baseUrl</code>可以成功加载这些资源。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.loadDataWithBaseURL(testUrl, IOUtil.readFile(path), <span class="string">"html/text"</span>, <span class="keyword">null</span>, testUrl);</span><br></pre></td></tr></table></figure><h2 id="2-WebSettings"><a href="#2-WebSettings" class="headerlink" title="2.WebSettings"></a>2.WebSettings</h2><blockquote><p>下面的设置满足大多数情况下的WebView设置，注意的是’webSettings.setJavaScriptEnabled(true)’需要设置为true,除非界面是完全的静态界面不包含js代码，不然客户端加载网页会失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> WebSettings webSettings = webView.getSettings();</span><br><span class="line">        webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);<span class="comment">//缓存模式，不加载缓存</span></span><br><span class="line">        webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);<span class="comment">// 网页支持JS脚本</span></span><br><span class="line">        webView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);<span class="comment">// 开启DOM storage API 功能</span></span><br><span class="line">        <span class="comment">//允许混合内容 解决部分(5.0以上)手机 加载不出https请求里面的http的图片</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置自适应屏幕，两者合用</span></span><br><span class="line">        webSettings.setUseWideViewPort(<span class="keyword">true</span>); <span class="comment">//将图片调整到适合webview的大小</span></span><br><span class="line">        webSettings.setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //缩放操作</span></span><br><span class="line">        webSettings.setSupportZoom(<span class="keyword">true</span>); <span class="comment">//支持缩放，默认为true。是下面那个的前提。</span></span><br><span class="line">        webSettings.setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置内置的缩放控件。若为false，则该WebView不可缩放</span></span><br><span class="line">        webSettings.setDisplayZoomControls(<span class="keyword">false</span>); <span class="comment">//隐藏原生的缩放控件</span></span><br></pre></td></tr></table></figure><h2 id="3-Java和JS的交互"><a href="#3-Java和JS的交互" class="headerlink" title="3. Java和JS的交互"></a>3. Java和JS的交互</h2><blockquote><p>设置WebView支持JS功能 <code>settings.setJavaScriptEnabled(true);</code><br>在Html中定义需要调用的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">&lt;!-- JS 调用 Java--&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showToastMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.android.showToastMessage(text)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--Java 调用 JS--&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">        alert(message)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> text=<span class="string">"js 调用 Java"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-Java调用JS代码"><a href="#3-1-Java调用JS代码" class="headerlink" title="3.1 Java调用JS代码"></a>3.1 Java调用JS代码</h3><h4 id="3-1-1-通过WebView的loadUrl-方式"><a href="#3-1-1-通过WebView的loadUrl-方式" class="headerlink" title="3.1.1. 通过WebView的loadUrl()方式"></a>3.1.1. 通过WebView的loadUrl()方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须另开线程进行JS方法调用(否则无法调用)</span></span><br><span class="line">               mWebView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                       <span class="comment">// 注意调用的JS方法名要对应上</span></span><br><span class="line">                       <span class="comment">// 调用javascript的callJS()方法</span></span><br><span class="line">                         webView.loadUrl(<span class="string">"javascript:alertMessage(\"Java 调用 JS \")"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><h4 id="3-1-2-通过WebView的evaluateJavascript-方式"><a href="#3-1-2-通过WebView的evaluateJavascript-方式" class="headerlink" title="3.1.2. 通过WebView的evaluateJavascript()方式"></a>3.1.2. 通过WebView的evaluateJavascript()方式</h4><blockquote><ol><li>该方法的执行不会使页面刷新，而第一种方法（loadUrl ）的执行则会</li><li>Android 4.4 后才可使用</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mWebView.evaluateJavascript（&quot;javascript:callJS(\&quot;Java 调用 JS \&quot;)&quot;, new ValueCallback&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceiveValue(String value) &#123;</span><br><span class="line">            //此处为 js 返回的结果</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2-JS调用Java代码"><a href="#3-2-JS调用Java代码" class="headerlink" title="3.2 JS调用Java代码"></a>3.2 JS调用Java代码</h3><blockquote><p>定义JS和Java的接口类, 需要在方法上面添加<code>@JavascriptInterface</code>注释</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js和java的接口定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsInteration</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToastMessage</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">            jsHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加JS交互接口,下面’android’为定义的接口名称，字段可以自定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JsInteration(), <span class="string">"android"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>JS的调用方法,语法为<code>window.接口名.方法名(参数)</code>，接口名为上面定义的字段’android’。方法调用如下。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showToastMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">window</span>.android.showToastMessage(text)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-WebChromeClient的常用设置"><a href="#4-WebChromeClient的常用设置" class="headerlink" title="4.WebChromeClient的常用设置"></a>4.WebChromeClient的常用设置</h2><blockquote><p>WebChromeClient是辅助WebView处理Javascript的对话框，网站图标，网站title，加载进度等.</p></blockquote><p>监听网页加载进图，更新进度条<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WebChromeClient chromeClient = <span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onProgressChanged(view, newProgress);</span><br><span class="line">               progressBar.setProgress(newProgress);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">webView.setWebChromeClient(chromeClient);</span><br></pre></td></tr></table></figure></p><h2 id="5-WebViewClient的常用设置"><a href="#5-WebViewClient的常用设置" class="headerlink" title="5.WebViewClient的常用设置"></a>5.WebViewClient的常用设置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">WebViewClient client = <span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onPageStarted(view, url, favicon);</span><br><span class="line">               progressBar.setVisibility(View.VISIBLE);</span><br><span class="line">               Log.d(TAG, <span class="string">"onPageStarted"</span>);</span><br><span class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mListener.onPageStart(url);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</span><br><span class="line">               handler.proceed(); <span class="comment">// 加载https自签名网站错误处理 例如https://www.12306.cn/mormhweb/</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">               Log.d(TAG, <span class="string">"onPageFinished"</span>);</span><br><span class="line">               progressBar.setVisibility(View.GONE);</span><br><span class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mListener.onPageFinish(url);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onReceivedError(view, request, error);</span><br><span class="line">               Log.d(TAG, <span class="string">"onReceivedError"</span>);</span><br><span class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mListener.onPageError();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView webView, String s)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 有些网页有拨打电话，打开第三方应用等的一些功能，如果有这种需求需要拦截请求地址，如果不是http</span></span><br><span class="line">           、或者https协议，将请求交给系统处理。</span><br><span class="line"></span><br><span class="line">               Log.d(TAG, <span class="string">"OverrideUrl: "</span> + URLDecoder.decode(s));</span><br><span class="line">               <span class="keyword">if</span> (s.startsWith(<span class="string">"http://"</span>) || s.startsWith(<span class="string">"https://"</span>)) &#123;</span><br><span class="line">                   webView.loadUrl(s);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Uri uri = Uri.parse(s);</span><br><span class="line">                       Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">                       getContext().startActivity(intent);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><h2 id="6-清除界面"><a href="#6-清除界面" class="headerlink" title="6.清除界面"></a>6.清除界面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (webView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           webView.loadUrl(<span class="string">"about:blank"</span>);</span><br><span class="line">           webView.removeAllViews();</span><br><span class="line">           webView.destroy();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="7-其他设置"><a href="#7-其他设置" class="headerlink" title="7.其他设置"></a>7.其他设置</h2><h3 id="7-1拦截下载链接"><a href="#7-1拦截下载链接" class="headerlink" title="7.1拦截下载链接"></a>7.1拦截下载链接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webView.setDownloadListener(<span class="keyword">new</span> DownloadListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadStart</span><span class="params">(String url, String userAgent, String contentDisposition, String mimetype, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">              <span class="comment">// TODO 拦截下载请求</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h2 id="WebView-的缓存问题"><a href="#WebView-的缓存问题" class="headerlink" title="WebView 的缓存问题"></a>WebView 的缓存问题</h2><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><blockquote><p>数据缓存分为AppCache和DOM Storage两种</p></blockquote><h4 id="AppCache"><a href="#AppCache" class="headerlink" title="AppCache"></a>AppCache</h4><blockquote><p>我们能够有选择的缓冲web浏览器中所有的东西，从页面、图片到脚本、css等等。<br>尤其在涉及到应用于网站的多个页面上的CSS和JavaScript文件的时候非常有用。其大小目前通常是5M。<br>在Android上需要手动开启（setAppCacheEnabled），并设置路径（setAppCachePath）和容量<br>（setAppCacheMaxSize），而Android中使用ApplicationCache.db来保存AppCache数据！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webView.getSettings().setAppCacheMaxSize(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">8</span>);</span><br><span class="line">       String appCachePath = getContext().getApplicationContext().getCacheDir().getAbsolutePath();</span><br><span class="line">       webView.getSettings().setAppCachePath(appCachePath);</span><br><span class="line">       webView.getSettings().setAppCacheEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="DOM-Storage"><a href="#DOM-Storage" class="headerlink" title="DOM Storage"></a>DOM Storage</h3><blockquote><p>存储一些简单的用key/value对即可解决的数据，根据作用范围的不同，有Session<br>Storage和Local Storage两种，分别用于会话级别的存储（页面关闭即消失）和本地化存储（除非主动<br>删除，否则数据永远不会过期）在Android中可以手动开启DOM Storage（setDomStorageEnabled），<br>设置存储路径（setDatabasePath）Android中Webkit会为DOMStorage产生两个文件（my_path/localstorage/http_blog.csdn.net_0.localstorage和my_path/Databases.db)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启DOM storage API 功能</span></span><br><span class="line">      webView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="加载带有js脚本的网页失败"><a href="#加载带有js脚本的网页失败" class="headerlink" title="加载带有js脚本的网页失败"></a>加载带有js脚本的网页失败</h3><p>webSettings.setJavaScriptEnabled(true);<br>设置WebView支持JS,如果不开启的话一些包含JS的网页可能会打开失败，例如<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a>、<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>。另外网页中的JS方法也会不响应。</p><h3 id="下载链接点击无反应"><a href="#下载链接点击无反应" class="headerlink" title="下载链接点击无反应"></a>下载链接点击无反应</h3><blockquote><p>需要自己实现DownLoadListener</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webView.setDownloadListener(<span class="keyword">new</span> DownloadListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadStart</span><span class="params">(String url, String userAgent, String contentDisposition, String mimetype, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">                Uri uri = Uri.parse(url);</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="加载https网站失败"><a href="#加载https网站失败" class="headerlink" title="加载https网站失败"></a>加载https网站失败</h3><blockquote><p>WebView加载自签名的https链接失败<br>需要在<code>WebViewClient</code>中重写下面方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</span><br><span class="line">      handler.proceed(); <span class="comment">// 加载https的不安全网站处理 例如https://www.12306.cn/mormhweb/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="使用了Local-Storage存储的网页加载失败"><a href="#使用了Local-Storage存储的网页加载失败" class="headerlink" title="使用了Local Storage存储的网页加载失败"></a>使用了<code>Local Storage</code>存储的网页加载失败</h3><blockquote><p>如果网页使用了<code>Local Storage</code>存储，如果设置中没给与相应权限，界面会加载空白</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启DOM storage API 功能</span></span><br><span class="line">      webView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;WebView 实际上继承AbsoluteLayout,但是完全不支持ViewGroup的各种操作；无法查找里面的控件，也不能addView()&lt;/li&gt;
&lt;li&gt;WebView内部的内容不是控件，而是屏幕绘制出来的内容，底层是一个浏览器引擎：webKit画出来的&lt;/li&gt;
&lt;li&gt;webKit:一套开源的，支持多平台的浏览器引擎，几乎所有的android手机官方，默认浏览器，都使用了webkit ，能够将网页用图像的形式绘制出来，同时支持JavaScript和Html5的各种规范。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://androidhuilin.wang/categories/Android/"/>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ShapeTextView</title>
    <link href="https://androidhuilin.wang/2017/05/04/ShapeTextView/"/>
    <id>https://androidhuilin.wang/2017/05/04/ShapeTextView/</id>
    <published>2017-05-04T05:46:22.000Z</published>
    <updated>2019-05-19T14:44:31.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自定义ShapeTextView 其实就是代码代替xml实现shape的过程</p></blockquote><a id="more"></a><h2 id="属性的定义"><a href="#属性的定义" class="headerlink" title="属性的定义"></a>属性的定义</h2><blockquote><p>每个View都有一些它的特殊属性，在创建新的View的时候，应该考虑到它所具有的属性并在<code>在res-values-styles</code>文件中定义View需要的属性。关于属性的介绍可参考<a href="https://violinlin.github.io/2016/06/27/%E8%87%AA%E5%AE%9A%E4%B9%89View%E2%80%93%E7%BB%98%E5%88%B6%E9%92%9F%E8%A1%A8/" target="_blank" rel="noopener">绘制钟表</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ShapeTextView"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"shape"</span> <span class="attr">format</span>=<span class="string">"enum"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"rectangle"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"oval"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"solidNormal"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"solidPressed"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"cornersRadius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"cornerTopLeft"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"cornerTopRight"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"cornerBottomLeft"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"cornerBottomRight"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"strokeWidth"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"strokeColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:right">类型</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:left">shape</td><td style="text-align:right">enum</td><td style="text-align:center">枚举类型，定义了<code>oval</code>和<code>rectangle</code>常用的两种</td></tr><tr><td style="text-align:left">solidNormal</td><td style="text-align:right">color</td><td style="text-align:center">填充色（正常显示）</td></tr><tr><td style="text-align:left">solidPressed</td><td style="text-align:right">color</td><td style="text-align:center">填充色（点击显示）</td></tr><tr><td style="text-align:left">cornersRadius</td><td style="text-align:right">dimension</td><td style="text-align:center">圆角半径（<code>shape：rectangle</code>）可用</td></tr><tr><td style="text-align:left">cornerTopLeft、cornerTopRight、cornerBottomLeft、cornerBottomRight</td><td style="text-align:right">dimension</td><td style="text-align:center">自定义每个角的半径，不能同时设置<code>cornersRadius</code>属性，或设置<code>cornersRadius</code>为0</td></tr><tr><td style="text-align:left">strokeWidth</td><td style="text-align:right">dimension</td><td style="text-align:center">描边的宽度</td></tr><tr><td style="text-align:left">strokeColor</td><td style="text-align:right">color</td><td style="text-align:center">描边的颜色</td></tr></tbody></table><h2 id="创建ShapeTextView-继承TextView"><a href="#创建ShapeTextView-继承TextView" class="headerlink" title="创建ShapeTextView 继承TextView"></a>创建<code>ShapeTextView</code> 继承<code>TextView</code></h2><p>在构造方法中获取自定义的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShapeTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">      TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.ShapeTextView);</span><br><span class="line">      shape = array.getInteger(R.styleable.ShapeTextView_shape, SHAPE_RECTANGEL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      solidNormalColor = array.getColor(R.styleable.ShapeTextView_solidNormal, Color.parseColor(<span class="string">"#00000000"</span>));</span><br><span class="line">      solidPressedColor = array.getColor(R.styleable.ShapeTextView_solidPressed, Color.parseColor(<span class="string">"#00000000"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      cornersRadius = array.getDimension(R.styleable.ShapeTextView_cornersRadius, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      cornersTopLeft = array.getDimension(R.styleable.ShapeTextView_cornerTopLeft, <span class="number">0</span>);</span><br><span class="line">      cornersTopRight = array.getDimension(R.styleable.ShapeTextView_cornerTopRight, <span class="number">0</span>);</span><br><span class="line">      cornersBottomLeft = array.getDimension(R.styleable.ShapeTextView_cornerBottomLeft, <span class="number">0</span>);</span><br><span class="line">      cornersBottomRight = array.getDimension(R.styleable.ShapeTextView_cornerBottomRight, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      strokeWidth = array.getDimension(R.styleable.ShapeTextView_strokeWidth, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      strokeColor = array.getColor(R.styleable.ShapeTextView_strokeColor, Color.parseColor(<span class="string">"#00000000"</span>));</span><br><span class="line">      array.recycle();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="实现shape标签"><a href="#实现shape标签" class="headerlink" title="实现shape标签"></a>实现<code>shape</code>标签</h2><blockquote><p>使用<code>GradientDrawable</code>类在代码中实现<code>shape</code>标签中的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// normal state</span></span><br><span class="line">     GradientDrawable drawableNormal = <span class="keyword">new</span> GradientDrawable();</span><br><span class="line">     <span class="comment">// 设置Shape</span></span><br><span class="line">     drawableNormal.setShape(shape);</span><br><span class="line">     <span class="comment">// 设置圆角半径</span></span><br><span class="line">     drawableNormal.setCornerRadius(cornersRadius);</span><br><span class="line">     <span class="comment">// 圆角半径(每个圆角半径的值)</span></span><br><span class="line">     <span class="keyword">if</span> (cornersRadius == <span class="number">0</span>) &#123;</span><br><span class="line">         drawableNormal.setCornerRadii(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">                 cornersTopLeft, cornersTopLeft,</span><br><span class="line">                 cornersTopRight, cornersTopRight,</span><br><span class="line">                 cornersBottomRight, cornersBottomRight,</span><br><span class="line">                 cornersBottomLeft, cornersBottomLeft&#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//描边的宽度和颜色</span></span><br><span class="line">     drawableNormal.setStroke((<span class="keyword">int</span>) strokeWidth, strokeColor);</span><br><span class="line">     <span class="comment">//设置填充色</span></span><br><span class="line">     drawableNormal.setColor(solidNormalColor);</span><br></pre></td></tr></table></figure><h2 id="实现selector-标签"><a href="#实现selector-标签" class="headerlink" title="实现selector 标签"></a>实现<code>selector</code> 标签</h2><blockquote><p>使用<code>StateListDrawable</code>在代码中实现<code>selector</code>标签中的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 设置背景选择器</span></span><br><span class="line">      StateListDrawable stateListDrawable = <span class="keyword">new</span> StateListDrawable();</span><br><span class="line"></span><br><span class="line">      stateListDrawable.addState(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.state_pressed&#125;, drawablePressed);</span><br><span class="line"></span><br><span class="line">      stateListDrawable.addState(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;, drawableNormal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置视图的背景</span></span><br><span class="line">      setBackground(stateListDrawable);</span><br></pre></td></tr></table></figure><h2 id="重写onDraw-方法"><a href="#重写onDraw-方法" class="headerlink" title="重写onDraw()方法"></a>重写<code>onDraw()</code>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        setShape();<span class="comment">//方法内主要内容为上面代码段</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="/img/shapetextview.gif" alt="enter image description here"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自定义ShapeTextView 其实就是代码代替xml实现shape的过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
      <category term="自定义view" scheme="https://androidhuilin.wang/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>Android渠道打包</title>
    <link href="https://androidhuilin.wang/2017/04/27/Android%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    <id>https://androidhuilin.wang/2017/04/27/Android渠道打包/</id>
    <published>2017-04-27T09:46:32.000Z</published>
    <updated>2019-05-17T08:51:14.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天运营同学要帮忙打渠道包做首发推广，渠道平台要求首发得按要求替换应用图标和闪屏界面。本来做好了挨个打包的准备，后来找到种渠道包替换资源的方法。AS真心强大啊。</p></blockquote><a id="more"></a><h2 id="1-添加渠道信息"><a href="#1-添加渠道信息" class="headerlink" title="1. 添加渠道信息"></a>1. 添加渠道信息</h2><p>1.1 在<code>app/build.gradle</code>文件中添加渠道信息</p><p> 如果清单文件中配置了统计渠道字段，替换相应平台的渠道号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">"CHANEL"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:value</span>=<span class="string">"$&#123;CHANEL&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">       baidu &#123;</span><br><span class="line">           manifestPlaceholders=[CHANEL:<span class="string">"baidu"</span>]</span><br><span class="line">       &#125;</span><br><span class="line">       yingyongbao &#123;</span><br><span class="line">           manifestPlaceholders=[CHANEL:<span class="string">"yingyongbao"</span>]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2-替换渠道资源文件"><a href="#2-替换渠道资源文件" class="headerlink" title="2. 替换渠道资源文件"></a>2. 替换渠道资源文件</h2><p>在<code>app/src</code>目录下创建渠道包名，例如创建<code>baidu</code>,该目录和<code>main</code>目录同级。在目录下创建<code>main</code>中对应的资源文件，在打渠道包时资源会自动进行替换。下面对应用图标做了替换。<br><img src="/img/chanelAndroidChanel.png" alt="enter image description here"></p><h2 id="3-打包"><a href="#3-打包" class="headerlink" title="3. 打包"></a>3. 打包</h2><p>通过<code>build/Generate Signed APK</code> 打渠道包，可以全选，也可以打单个渠道。</p><p><img src="/img/chanelandroid_chanel_pack.png" alt="enter image description here"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天运营同学要帮忙打渠道包做首发推广，渠道平台要求首发得按要求替换应用图标和闪屏界面。本来做好了挨个打包的准备，后来找到种渠道包替换资源的方法。AS真心强大啊。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SystemBar</title>
    <link href="https://androidhuilin.wang/2017/04/25/SystemBar/"/>
    <id>https://androidhuilin.wang/2017/04/25/SystemBar/</id>
    <published>2017-04-25T06:32:18.000Z</published>
    <updated>2019-05-19T14:44:31.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SystemBars 主要包括两个状态栏<code>StatusBar</code>和导航栏<code>NavigationBar</code>。状态栏用来显示时间、电量等系统信息，导航栏一般在无实体按键的手机上，用来代替回退、Home、和菜单键。</p></blockquote><a id="more"></a><h2 id="1-沉浸模式的应用"><a href="#1-沉浸模式的应用" class="headerlink" title="1. 沉浸模式的应用"></a>1. 沉浸模式的应用</h2><p><a href="https://developer.android.com/training/system-ui/immersive.html#sticky" target="_blank" rel="noopener">沉浸模式</a><br>Android 4.4(API 19) 以上支持了沉浸模式<code>IMMERSIVE MODE</code> 可以让布局在整个手机屏幕上显示，隐藏掉系统栏。一般游戏、图片预览、电影等app都会使用这种模式。这里做一个图片预览的简单应用。</p><h3 id="1-1-在主题文件中设置系统栏透明"><a href="#1-1-在主题文件中设置系统栏透明" class="headerlink" title="1.1 在主题文件中设置系统栏透明"></a>1.1 在主题文件中设置系统栏透明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="comment">&lt;!--设置状态栏透明--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span><span class="comment">&lt;!--设置导航了透明--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-隐藏系统栏"><a href="#1-2-隐藏系统栏" class="headerlink" title="1.2 隐藏系统栏"></a>1.2 隐藏系统栏</h3><blockquote><p>默认界面获取焦点的时候隐藏系统栏，所以在<code>onResume()</code>方法中进行下面操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onResume();</span><br><span class="line">       hideSysBar();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideSysBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       getWindow().getDecorView().setSystemUiVisibility(</span><br><span class="line">               HIDE_SYSBAR_FLAG);</span><br><span class="line">       relativeLayout.startAnimation(mHiddenAction);</span><br><span class="line">       relativeLayout.setVisibility(View.GONE);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-显示系统栏"><a href="#1-3-显示系统栏" class="headerlink" title="1.3 显示系统栏"></a>1.3 显示系统栏</h3><blockquote><p>点击界面时显示系统通知栏</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showSysBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       decorView.setSystemUiVisibility(SHOW_SYSBAR_FLAG);</span><br><span class="line">       relativeLayout.startAnimation(mShowAction);</span><br><span class="line">       relativeLayout.setVisibility(View.VISIBLE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-补充说明"><a href="#2-补充说明" class="headerlink" title="2. 补充说明"></a>2. 补充说明</h3><p>2.1 为了保证隐藏掉系统栏后布局能够自适应屏幕，需要在布局文件中添加<code>android:fitsSystemWindows=&quot;true&quot;</code></p><p> 2.2 系统栏FLAG说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> HIDE_SYSBAR_FLAG = View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">          | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">          | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line">          | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION <span class="comment">// hide nav bar</span></span><br><span class="line">          | View.SYSTEM_UI_FLAG_FULLSCREEN <span class="comment">// hide status bar</span></span><br><span class="line">          | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;<span class="comment">//设置沉浸模式,系统栏自动隐藏</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SHOW_SYSBAR_FLAG = View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">          | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">          | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;<span class="comment">//显示系统栏flag,同时是布局在系统栏底部显示</span></span><br></pre></td></tr></table></figure><p>2.3 视图动画说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TranslateAnimation mShowAction;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mShowAction = <span class="keyword">new</span> TranslateAnimation(Animation.RELATIVE_TO_SELF, <span class="number">0.0f</span>,</span><br><span class="line">               Animation.RELATIVE_TO_SELF, <span class="number">0.0f</span>, Animation.RELATIVE_TO_SELF,</span><br><span class="line">               -<span class="number">1.0f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.0f</span>);</span><br><span class="line">       mShowAction.setDuration(<span class="number">500</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   TranslateAnimation mHiddenAction;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       mHiddenAction = <span class="keyword">new</span> TranslateAnimation(Animation.RELATIVE_TO_SELF,</span><br><span class="line">               <span class="number">0.0f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.0f</span>,</span><br><span class="line">               Animation.RELATIVE_TO_SELF, <span class="number">0.0f</span>, Animation.RELATIVE_TO_SELF,</span><br><span class="line">               -<span class="number">1.0f</span>);</span><br><span class="line">       mHiddenAction.setDuration(<span class="number">500</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/img/blog_sysbar.gif" alt="效果预览"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SystemBars 主要包括两个状态栏&lt;code&gt;StatusBar&lt;/code&gt;和导航栏&lt;code&gt;NavigationBar&lt;/code&gt;。状态栏用来显示时间、电量等系统信息，导航栏一般在无实体按键的手机上，用来代替回退、Home、和菜单键。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
      <category term="MD" scheme="https://androidhuilin.wang/tags/MD/"/>
    
  </entry>
  
  <entry>
    <title>Toolbar的使用</title>
    <link href="https://androidhuilin.wang/2017/04/19/Toolbar%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://androidhuilin.wang/2017/04/19/Toolbar的使用/</id>
    <published>2017-04-19T12:44:39.000Z</published>
    <updated>2019-05-19T15:59:52.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Toolbar</code>是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件，用来代替以之前的 <code>ActionBar</code>。尽管Google诚意满满，使用<code>Toolbar</code>依然是一部踩坑填坑的血泪史。</p></blockquote><a id="more"></a><p>对于<code>Toolbar</code>Google给开发者留了很多可定制修改的余地。<a href="https://developer.android.google.cn/reference/android/support/v7/widget/Toolbar.html" target="_blank" rel="noopener">官方文档</a></p><p><img src="/img/Toolbar_api.png" alt></p><ul><li>设置导航按键</li><li>设置程序Logo</li><li>设置主/副标题</li><li>设置一个或多个自定义控件</li><li>支持acition menu</li></ul><h2 id="1-Toolbar的引入"><a href="#1-Toolbar的引入" class="headerlink" title="1. Toolbar的引入"></a>1. Toolbar的引入</h2><blockquote><p> <code>Toolbar</code>用来替代<code>ActionBar</code>,所以Activity的<code>Theme</code>设置成<code>NoActionBar</code>的例如<code>Theme.AppCompat.Light.NoActionBar</code>或者在代码中去掉导航栏在<code>onCreate()</code>中添加<code>supportRequestWindowFeature(Window.FEATURE_NO_TITLE)</code></p></blockquote><p>1.1 添加兼容包依赖<br> <code>Toolbar</code>是向下兼容的，所以使用时添加<code>support</code>依赖包<code>compile &#39;com.android.support:appcompat-v7:23.1.1&#39;</code><br>1.2  在布局文件中引入<code>Toolbar</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:navigationIcon</span>=<span class="string">"@drawable/ic_drawer_home"</span>//导航图标</span></span><br><span class="line"><span class="tag"><span class="attr">app:logo</span>=<span class="string">"@mipmap/ic_launcher"</span>//程序<span class="attr">logo</span></span></span><br><span class="line"><span class="tag"><span class="attr">app:title</span>=<span class="string">"Title"</span>//主标题</span></span><br><span class="line"><span class="tag"><span class="attr">app:subtitle</span>=<span class="string">"SubTitle"</span>//副标题&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"custom view"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.3  在代码中设置<code>Toolbar</code>替代<code>ActionBar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_toolbar);</span><br><span class="line">       Toolbar toolbar= (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">       setSupportActionBar(toolbar);<span class="comment">//Toolbar 代替ActionBar</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>程序预览<br><img src="/img/Toolbar_1.png" alt></p><h2 id="2-标题字体样式的自定义"><a href="#2-标题字体样式的自定义" class="headerlink" title="2. 标题字体样式的自定义"></a>2. 标题字体样式的自定义</h2><blockquote><p>简单的引入了<code>Toolbar</code>,但这并不能满足我们的开发要求。标题的字体样式我们总得按照设计稿来吧。</p></blockquote><h3 id="2-1-修改标题字体颜色"><a href="#2-1-修改标题字体颜色" class="headerlink" title="2.1 修改标题字体颜色"></a>2.1 修改标题字体颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app:titleTextColor=&quot;@color/colorAccent&quot;//修改主标题字体颜色</span><br><span class="line">app:subtitleTextColor=&quot;@color/colorAccent&quot;//修改副标题字体颜色</span><br></pre></td></tr></table></figure><h3 id="2-2-修改标题字体大小"><a href="#2-2-修改标题字体大小" class="headerlink" title="2.2 修改标题字体大小"></a>2.2 修改标题字体大小</h3><p>修改字体大小就比较坑了，我没找到设置字体大小的直接属性。可能<code>Toolbar</code>的设计中会自动设置标题的字体大小为一个合适的值。其实用默认的大小基本ok。如果想要修改字体大小可以尝试下面的方法。</p><p><strong>我在样式文件中定义了需要样式的父类样式，所以后面 的样式都没写<code>parent</code>,他们都自动继承这个样式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Toolbar 样式--&gt;</span><br><span class="line">    &lt;style name=&quot;Theme.Toolbar&quot; parent=&quot;ThemeOverlay.AppCompat.ActionBar&quot;&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>2.2.1 在<code>styles.xml</code>定义标题的字体样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Toolbar 主标题的字体和颜色--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.Toolbar.Title"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Toolbar 副标题的字体和颜色--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.Toolbar.SubTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2.2 在布局文件中使用样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app:subtitleTextAppearance="@style/Theme.Toolbar.SubTitle"</span><br><span class="line">app:titleTextAppearance="@style/Theme.Toolbar.Title"</span><br></pre></td></tr></table></figure><h2 id="3-Action-Menu的添加"><a href="#3-Action-Menu的添加" class="headerlink" title="3. Action Menu的添加"></a>3. Action Menu的添加</h2><p>由于上面已经通过<code>setSupportActionBar(toolbar)</code>将<code>Toolbar</code>设置成了程序的<code>ActionBar</code>。菜单布局的渲染和菜单按键的监听可以直接在<code>Activity</code>的回调方法中实现<br>3.1 创建菜单布局文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"always"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_notifications"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.2 加载菜单布局文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">       getMenuInflater().inflate(R.menu.toobar, menu);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>3.3 设置菜单点击回调监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">           <span class="keyword">case</span> R.id.menu1:</span><br><span class="line">               Toast.makeText(ToolbarActivity.<span class="keyword">this</span>, <span class="string">"item1:"</span> + item.getTitle().toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.menu2:</span><br><span class="line">               Toast.makeText(ToolbarActivity.<span class="keyword">this</span>, <span class="string">"item2"</span> + item.getTitle().toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/img/Toolbar_2.png" alt></p><h2 id="4-Action-Menu样式的自定义"><a href="#4-Action-Menu样式的自定义" class="headerlink" title="4. Action Menu样式的自定义"></a>4. Action Menu样式的自定义</h2><blockquote><p>如图预览所示，这里会有下面几个问题：</p><ol><li>显示更多菜单按键由系统生成和其他图标不符</li><li>菜单弹窗背景字体样式等的自定义</li><li>菜单弹窗中子菜单项图标没有显示（运行到手机也没显示）</li></ol></blockquote><h3 id="4-1-显示更多菜单图标的替换"><a href="#4-1-显示更多菜单图标的替换" class="headerlink" title="4.1 显示更多菜单图标的替换"></a>4.1 显示更多菜单图标的替换</h3><p>4.1.1 在styles.xml样式文件中定义<code>Toolbar</code>的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Toolbar 样式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.Toolbar"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.ActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowButtonStyle"</span>&gt;</span>@style/Toolbar_action_menu<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--更多菜单图标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Toolbar_action_menu"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:src"</span>&gt;</span>@drawable/ic_menu_more_overflow<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.1.2 在布局文件中为<code>Toolbar</code>指定样式文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme="@style/Theme.Toolbar"</span><br></pre></td></tr></table></figure><h3 id="4-2-菜单弹窗背景、字体的自定义"><a href="#4-2-菜单弹窗背景、字体的自定义" class="headerlink" title="4.2 菜单弹窗背景、字体的自定义"></a>4.2 菜单弹窗背景、字体的自定义</h3><p>4.2.1 在styles.xml样式文件中定义<code>Toolbar</code>菜单的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单上文字的大小和颜色--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.Toolbar.PopMenu"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/cl_1B2137<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.1.2 在布局文件中为<code>Toolbar</code>弹窗菜单指定样式文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:popupTheme=&quot;@style/Theme.Toolbar.PopMenu&quot;</span><br></pre></td></tr></table></figure><h3 id="4-3-菜单弹窗子菜单图标不显示解决方案"><a href="#4-3-菜单弹窗子菜单图标不显示解决方案" class="headerlink" title="4.3 菜单弹窗子菜单图标不显示解决方案"></a>4.3 菜单弹窗子菜单图标不显示解决方案</h3><p>4.3.1 添加菜单显示的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置菜单选项图标是否显示</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIconEnable</span><span class="params">(Menu menu, <span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menu != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (menu.getClass().getSimpleName().equals(<span class="string">"MenuBuilder"</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method m = menu.getClass().getDeclaredMethod(<span class="string">"setOptionalIconsVisible"</span>, Boolean.TYPE);</span><br><span class="line">                    m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    m.invoke(menu, enable);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.3.2 在创建菜单的时候设置图标是否显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">       setIconEnable(menu, <span class="keyword">true</span>);</span><br><span class="line">       getMenuInflater().inflate(R.menu.toobar, menu);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在手机上运行显示截图如下<br><img src="/img/Toolbar_3.png" alt></p><p><img src="/img/Toolbar_4.png" alt></p><h2 id="5-关于主标题的显示问题"><a href="#5-关于主标题的显示问题" class="headerlink" title="5. 关于主标题的显示问题"></a>5. 关于主标题的显示问题</h2><blockquote><p>因为在代码中通过<code>setSupportActionBar(toolbar);</code>将<code>Toolbar</code>设置成了<code>ActionBar</code>,所以如果没有没置<code>Toolbar</code>的主标题，或者主标题设置为了空<code>app:title=&quot;&quot;</code>，系统会获取<code>Activity</code>的<code>lable</code>字段设置为主标题。如果<code>Activity</code>的<code>lable</code>为空则会获取<code>application</code>的<code>label</code>字段设置<code>title</code>。<br>解决这个问题，需要在代码中添加<br><code>getSupportActionBar().setDisplayShowTitleEnabled(false);</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Toolbar&lt;/code&gt;是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件，用来代替以之前的 &lt;code&gt;ActionBar&lt;/code&gt;。尽管Google诚意满满，使用&lt;code&gt;Toolbar&lt;/code&gt;依然是一部踩坑填坑的血泪史。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
      <category term="MD" scheme="https://androidhuilin.wang/tags/MD/"/>
    
  </entry>
  
  <entry>
    <title>Android 资源分包</title>
    <link href="https://androidhuilin.wang/2017/04/06/Android-%E8%B5%84%E6%BA%90%E5%88%86%E5%8C%85/"/>
    <id>https://androidhuilin.wang/2017/04/06/Android-资源分包/</id>
    <published>2017-04-06T07:36:57.000Z</published>
    <updated>2019-04-15T04:57:22.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直以为Android项目中的资源文件只能放在<code>src/main/res</code>的各个固定目录中。项目中的<code>java</code>代码可以根据功能模块创建不同的包来划分层次，资源文件则一般都放在<code>res</code>目录下。虽然可以通过命名规则区别不同模块的资源文件，但是随着业务的增长，开发人员的变动<code>res</code>目录会变得越来越繁杂。今天看到了一种资源分包的做法，感觉还不错，所以记录分享一下。</p></blockquote><a id="more"></a><p>在<code>build.gradle</code>文件中可以配置资源文件的文件路径</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>, <span class="string">'res-ptr'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如上清单文件、jar等都可以自己指定目录，如下配置资源文件目录</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            res.srcDirs = [<span class="string">'src/main/res'</span>,<span class="string">'src/main/res/mylayouts'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>src/main/res</strong>为项目默认路径</li><li><strong>src/main/res/mylayout</strong>为自定义路径（文件夹标识系统自动识别）<blockquote><p> 这种方式可以指定资源等文件夹，不过子文件夹得跟原来保持一致。例如图片文件放在<code>mylayouts/drawable</code>下、布局文件放在<code>mylayout/layout</code>下。</p></blockquote></li></ul><p><img src="/img/packandroidrespack.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直以为Android项目中的资源文件只能放在&lt;code&gt;src/main/res&lt;/code&gt;的各个固定目录中。项目中的&lt;code&gt;java&lt;/code&gt;代码可以根据功能模块创建不同的包来划分层次，资源文件则一般都放在&lt;code&gt;res&lt;/code&gt;目录下。虽然可以通过命名规则区别不同模块的资源文件，但是随着业务的增长，开发人员的变动&lt;code&gt;res&lt;/code&gt;目录会变得越来越繁杂。今天看到了一种资源分包的做法，感觉还不错，所以记录分享一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>流式布局的使用</title>
    <link href="https://androidhuilin.wang/2016/12/04/%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://androidhuilin.wang/2016/12/04/流式布局的使用/</id>
    <published>2016-12-04T14:57:35.000Z</published>
    <updated>2019-05-17T09:01:18.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>流式布局的使用</p></blockquote><a id="more"></a><p><strong>1.布局文件中的引用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.administrator.swiperefreshlayout.FlowLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/flowLayout"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:horizontal_spacing</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:vertical_spacing</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span><span class="tag">&lt;/<span class="name">com.example.administrator.swiperefreshlayout.FlowLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码中的引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FlowLayout flowLayout = (FlowLayout) findViewById(R.id.flowLayout);</span><br><span class="line">       List&lt;String&gt; datas = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               datas.add(<span class="string">"-------========"</span> + i);</span><br><span class="line">           &#125; <span class="keyword">else</span></span><br><span class="line">               datas.add(<span class="string">"item"</span> + i);</span><br><span class="line">           View view = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.flow_item, flowLayout, <span class="keyword">false</span>);</span><br><span class="line">           TextView textview = (TextView)view.findViewById(R.id.textview);</span><br><span class="line">           textview.setText(datas.get(i));</span><br><span class="line">           flowLayout.addView(view);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>3.FlowLayout的源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liangfeizc.flowlayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HORIZONTAL_SPACING = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_VERTICAL_SPACING = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mVerticalSpacing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHorizontalSpacing;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.FlowLayout);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mHorizontalSpacing = a.getDimensionPixelSize(</span><br><span class="line">                    R.styleable.FlowLayout_horizontal_spacing, DEFAULT_HORIZONTAL_SPACING);</span><br><span class="line">            mVerticalSpacing = a.getDimensionPixelSize(</span><br><span class="line">                    R.styleable.FlowLayout_vertical_spacing, DEFAULT_VERTICAL_SPACING);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            a.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHorizontalSpacing</span><span class="params">(<span class="keyword">int</span> pixelSize)</span> </span>&#123;</span><br><span class="line">        mHorizontalSpacing = pixelSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerticalSpacing</span><span class="params">(<span class="keyword">int</span> pixelSize)</span> </span>&#123;</span><br><span class="line">        mVerticalSpacing = pixelSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> myWidth = resolveSize(<span class="number">0</span>, widthMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> paddingLeft = getPaddingLeft();</span><br><span class="line">        <span class="keyword">int</span> paddingTop = getPaddingTop();</span><br><span class="line">        <span class="keyword">int</span> paddingRight = getPaddingRight();</span><br><span class="line">        <span class="keyword">int</span> paddingBottom = getPaddingBottom();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> childLeft = paddingLeft;</span><br><span class="line">        <span class="keyword">int</span> childTop = paddingTop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Measure each child and put the child to the right of previous child</span></span><br><span class="line">        <span class="comment">// if there's enough room for it, otherwise, wrap the line and put the child to next line.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, childCount = getChildCount(); i &lt; childCount; ++i) &#123;</span><br><span class="line">            View child = getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != View.GONE) &#123;</span><br><span class="line">                measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</span><br><span class="line">            <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">            lineHeight = Math.max(childHeight, lineHeight);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (childLeft + childWidth + paddingRight &gt; myWidth) &#123;</span><br><span class="line">                childLeft = paddingLeft;</span><br><span class="line">                childTop += mVerticalSpacing + lineHeight;</span><br><span class="line">                lineHeight = childHeight;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                childLeft += childWidth + mHorizontalSpacing;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wantedHeight = childTop + lineHeight + paddingBottom;</span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(myWidth, resolveSize(wantedHeight, heightMeasureSpec));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> myWidth = r - l;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> paddingLeft = getPaddingLeft();</span><br><span class="line">        <span class="keyword">int</span> paddingTop = getPaddingTop();</span><br><span class="line">        <span class="keyword">int</span> paddingRight = getPaddingRight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> childLeft = paddingLeft;</span><br><span class="line">        <span class="keyword">int</span> childTop = paddingTop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lineHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, childCount = getChildCount(); i &lt; childCount; ++i) &#123;</span><br><span class="line">            View childView = getChildAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (childView.getVisibility() == View.GONE) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class="line">            <span class="keyword">int</span> childHeight = childView.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">            lineHeight = Math.max(childHeight, lineHeight);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (childLeft + childWidth + paddingRight &gt; myWidth) &#123;</span><br><span class="line">                childLeft = paddingLeft;</span><br><span class="line">                childTop += mVerticalSpacing + lineHeight;</span><br><span class="line">                lineHeight = childHeight;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            childView.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight);</span><br><span class="line">            childLeft += childWidth + mHorizontalSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.自定义的属性文件</strong></p><blockquote><p><em>values/styles</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"FlowLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"horizontal_spacing"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"vertical_spacing"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;流式布局的使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
      <category term="自定义view" scheme="https://androidhuilin.wang/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>关于shape,selector style</title>
    <link href="https://androidhuilin.wang/2016/12/04/%E5%85%B3%E4%BA%8Eshape-selector-style/"/>
    <id>https://androidhuilin.wang/2016/12/04/关于shape-selector-style/</id>
    <published>2016-12-04T14:53:27.000Z</published>
    <updated>2019-05-18T23:47:30.974Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="http://keeganlee.me/post/android/20150830" target="_blank" rel="noopener">关于shape的讲解博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://keeganlee.me/post/android/20150830&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于shape的讲解博客&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Android" scheme="https://androidhuilin.wang/tags/Android/"/>
    
  </entry>
  
</feed>
